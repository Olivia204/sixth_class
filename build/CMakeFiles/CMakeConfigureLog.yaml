
---
events:
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:233 (message)"
      - "CMakeLists.txt:3 (project)"
    message: |
      The system is: Windows - 10.0.26100 - AMD64
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/4 20:00:36銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdC.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TC /FC /errorReport:queue CMakeCCompilerId.c
        CMakeCCompilerId.c
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdC.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdC.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdC.lib" /MACHINE:X64 Debug\\CMakeCCompilerId.obj
        CompilerIdC.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_C_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.54
      
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.exe"
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.vcxproj"
      
      The C compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdC/CompilerIdC.exe
      
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCXXCompiler.cmake:126 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/4 20:00:37銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdCXX.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TP /FC /errorReport:queue CMakeCXXCompilerId.cpp
        CMakeCXXCompilerId.cpp
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdCXX.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdCXX.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdCXX.lib" /MACHINE:X64 Debug\\CMakeCXXCompilerId.obj
        CompilerIdCXX.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_CXX_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_CXX_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\CompilerIdCXX.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.56
      
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.exe"
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.vcxproj"
      
      The CXX compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdCXX/CompilerIdCXX.exe
      
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting C compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vrye5j"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vrye5j"
    cmakeVariables:
      CMAKE_C_FLAGS: "/DWIN32 /D_WINDOWS"
      CMAKE_C_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_C_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vrye5j'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_7a9c4.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/4 20:00:38銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vrye5j\\cmTC_7a9c4.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_7a9c4.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vrye5j\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_7a9c4.dir\\Debug\\cmTC_7a9c4.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_7a9c4.dir\\Debug\\cmTC_7a9c4.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_7a9c4.dir\\Debug\\cmTC_7a9c4.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_7a9c4.dir\\Debug\\\\" /Fd"cmTC_7a9c4.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_7a9c4.dir\\Debug\\\\" /Fd"cmTC_7a9c4.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          CMakeCCompilerABI.c
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vrye5j\\Debug\\cmTC_7a9c4.exe" /INCREMENTAL /ILK:"cmTC_7a9c4.dir\\Debug\\cmTC_7a9c4.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vrye5j/Debug/cmTC_7a9c4.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vrye5j/Debug/cmTC_7a9c4.lib" /MACHINE:X64  /machine:x64 cmTC_7a9c4.dir\\Debug\\CMakeCCompilerABI.obj
          cmTC_7a9c4.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vrye5j\\Debug\\cmTC_7a9c4.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_7a9c4.dir\\Debug\\cmTC_7a9c4.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_7a9c4.dir\\Debug\\cmTC_7a9c4.tlog\\cmTC_7a9c4.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vrye5j\\cmTC_7a9c4.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.39
        
      exitCode: 0
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCXXCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting CXX compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-phtcui"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-phtcui"
    cmakeVariables:
      CMAKE_CXX_FLAGS: "/DWIN32 /D_WINDOWS /EHsc"
      CMAKE_CXX_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_CXX_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-phtcui'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_350ff.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/4 20:00:39銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-phtcui\\cmTC_350ff.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_350ff.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-phtcui\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_350ff.dir\\Debug\\cmTC_350ff.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_350ff.dir\\Debug\\cmTC_350ff.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_350ff.dir\\Debug\\cmTC_350ff.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_350ff.dir\\Debug\\\\" /Fd"cmTC_350ff.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_350ff.dir\\Debug\\\\" /Fd"cmTC_350ff.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          CMakeCXXCompilerABI.cpp
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-phtcui\\Debug\\cmTC_350ff.exe" /INCREMENTAL /ILK:"cmTC_350ff.dir\\Debug\\cmTC_350ff.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-phtcui/Debug/cmTC_350ff.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-phtcui/Debug/cmTC_350ff.lib" /MACHINE:X64  /machine:x64 cmTC_350ff.dir\\Debug\\CMakeCXXCompilerABI.obj
          cmTC_350ff.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-phtcui\\Debug\\cmTC_350ff.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_350ff.dir\\Debug\\cmTC_350ff.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_350ff.dir\\Debug\\cmTC_350ff.tlog\\cmTC_350ff.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-phtcui\\cmTC_350ff.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.55
        
      exitCode: 0
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple (clang|LLVM) version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is OrangeC using "--version" did not match "occ \\(OrangeC\\) Version":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is HP using "-V" did not match "HP C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is IntelLLVM using "--version" did not match "(Intel[^
      ]+oneAPI)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“-qversion”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1131 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is MSVC using "-?" matched "Microsoft":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
                   C/C++ 编译器选项
      
      
                     -优化-
      
      /O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
      /Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
      /Og 启用全局优化                        /Oi[-] 启用内部函数
      /Os 优选代码空间                        /Ot 优选代码速度
      /Ox 优化(优选速度)                      
      /favor:<blend|AMD64|INTEL64|ATOM> 选择优化所针对的处理器，为以下值之一:
         blend - 针对几种不同 x64 处理器的优化组合
         AMD64 - 64 位 AMD 处理器
         INTEL64 - Intel(R)64 架构处理器
         ATOM - Intel(R) Atom(TM) 处理器
      
                     -代码生成-
      
      /Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
      /GF 启用只读字符串池                    /Gy[-] 分隔链接器函数
      /GS[-] 启用安全检查                     /GR[-] 启用 C++ RTTI
      /guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
      /EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
      /EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
      /fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
         协定 - 生成代码时考虑浮点收缩
         except[-] - 在生成代码时考虑浮点异常
         fast - "fast" 浮点模型；结果可预测性比较低
         precise - "precise" 浮点模型；结果可预测
         strict - "strict" 浮点模型(意味着 /fp:except)
      即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
      /Qspectre[-] 对 CVE 2017-5753 启用缓解措施
      /Qpar[-] 启用并行代码生成               
      /Qpar-report:1 自动并行化诊断；指示已并行化循环
      /Qpar-report:2 自动并行化诊断；指示未并行化循环
      /Qvec-report:1 自动向量化诊断；指示已向量化循环
      /Qvec-report:2 自动向量化诊断；指示未向量化循环
      /GL[-] 启用链接时代码生成               
      /volatile:<iso|ms> 选择可变模型:
         iso - Acquire/release 语义对可变访问不一定有效
         ms - Acquire/release 语义对可变访问一定有效
      /GA 为 Windows 应用程序进行优化         /Ge 对所有函数强制堆栈检查
      /Gs[num] 控制堆栈检查调用               /Gh 启用 _penter 函数调用
      /GH 启用 _pexit 函数调用                /GT 生成纤程安全 TLS 访问
      /RTC1 启用快速检查(/RTCsu)              /RTCc 转换为较小的类型检查
      /RTCs 堆栈帧运行时检查                  /RTCu 未初始化的局部用法检查
      /clr[：option] 编译公共语言运行时，其中选项为：
          pure ： 生成仅 IL 的输出文件 (没有本机可执行代码)
          安全 ： 生成仅 IL 可验证的输出文件
          netcore ： 生成面向 .NET Core 运行时的程序集
          noAssembly ： 不生成程序集
          nostdlib ： 搜索程序集时忽略系统 .NET Framework 目录
          nostdimport ： 不隐式导入任何必需的程序集
          initialAppDomain ： 启用 Visual C++ 2002 的初始 AppDomain 行为
          implicitKeepAlive- ： 关闭 System：：GC：：KeepAlive 的隐式发出(此)
          char_t- ： 关闭对char8_t、char16_t和char32_t的元数据支持
          ECMAParamArray ： 对参数数组的重载使用 ECMA-372/372/14.6 中指定的规则 (/clr)
          ECMAParamArray- 使用带有参数数组的新规则，(/clr：netcore)
      /fsanitize=解决启用地址消毒代码生成     
      /homeparams 强制将传入寄存器的参数写入到堆栈中
      /GZ 启用堆栈检查(/RTCs)                 /Gv __vectorcall 调用约定
      (预览版)/dynamicdeopt 启用动态调试；放置取消优化的断点，并通过按需函数取消优化随时随地单步执行
      (预览) /dynamicdeopt:suffix <suffix> 用于去优化输出的文件扩展名后缀(默认值: .alt)
      (预览) /dynamicdeopt:sync 在生成优化输出后生成去优化输出，而不是并行生成
      /arch:<SSE2|SSE4.2|AVX|AVX2|AVX512|AVX10.x> 最低 CPU 体系结构要求，以下之一:
         SSE2 - (默认)允许使用通过支持 SSE2 的 CPU 提供的指令
         SSE4.2 - 允许使用通过支持 SSE4.2 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX 的 CPU 提供的指令
         AVX2 - 允许使用通过支持 AVX2 的 CPU 提供的指令
         AVX512 - 允许使用通过支持 AVX-512 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX10.x 的 CPU 提供的指令。x 的有效值为 1
      /QIntel-jcc-erratum 为 Intel JCC Erratum 启用缓解措施
      /Qspectre-load 对加载内存的所有指令启用 spectre 缓解措施
      /Qspectre-load-cf 对加载内存的所有控制流指令启用 spectre 缓解措施
      /Qspectre-jmp[-] 为无条件跳转指令启用 Spectre 缓解
      /fpcvt:<IA|BC> 无符号整数转换兼容性为 FP
        IA - 与 VCVTTSD2USI 指令兼容的结果
        BC - 与 VS2017 及更低版本的编译器兼容的结果
      /jumptablerdata 在 .rdata 部分中放置 switch case 语句的跳转表
      /vlen=<256|512> 为自动代码生成选择 256 或 512 的矢量长度
      /vlen 根据 /arch 设置选择默认矢量长度   
      
                     -输出文件-
      
      /Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
      /Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
      /Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
      /Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
      /FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
      /Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
      /Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
      /Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
      /Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址
      /doc[file] 处理 XML 文档注释，并可选择命名 .xdc 文件
      
                     -预处理器-
      
      /AI<dir> 添加到程序集搜索路径           /FU<file> 导入 .NET 程序集/模块
      /FU:asFriend<file> 将 .NET 程序集/模块导入为友元
      /C 不抽出注释                           /D<name>{=|#}<text> 定义宏
      /E 预处理到 stdout                      /EP 预处理到 stdout，无行号
      /P 预处理到文件                         /Fx 将插入的代码合并到文件中
      /FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
      /u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
      /X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
      /PD 打印所有宏定义                      
      
                      -语言-
      
      /std:<c++14|c++17|c++20|c++latest> C++ 标准版
          c++14 - ISO/IEC 14882:2014 (默认值)
          c++17 - ISO/IEC 14882:2017
          c++20 - ISO/IEC 14882:2020
          c++latest - 最新草案标准(功能集可能更改)
      /std:<c11|c17|clatest> C 标准版本
         c11 - ISO/IEC 9899:2011
         c17 - ISO/IEC 9899:2018
         clatest - 最新草稿标准(功能集可能会更改)
      /permissive[-] 启用一些不符合格式的代码进行编译
                    (功能集可能会更改)(在 C++20 及更高版本中默认关闭)
      /Za 禁用扩展(不建议用于 C++)            /ZW 启用 WinRT 语言扩展
      /Zs 只进行语法检查                      
      /await 启用可恢复函数扩展
      /await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
      /constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
      /constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
      /constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 1048576)
      /Zi 启用调试信息                        /Z7 启用旧式调试信息
      /Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
      /ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
      /Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
      /vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
      /Zc:arg1[,arg2] 语言一致性，这里的参数可以是:
       forScope[-]      对范围规则强制使用标准 C++
       wchar_t[-]      wchar_t 是本机类型，不是 typedef
       auto[-]               对 auto 强制使用新的标准 C++ 含义
       trigraphs[-]          启用三元祖(默认关闭)
       rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       strictStrings[-]      禁用字符串文本到 [char|wchar_t]*
                             转换(在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
       threadSafeInit[-]   启用线程安全的本地静态初始化
       inline[-]             删除未引用的函数或数据，如果其为
                             COMDAT 或仅具有内部链接(默认情况下关闭)
       sizedDealloc[-]       启用 C++14 全局大小的解除分配
                             函数(默认启用)
       throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
       referenceBinding[-]   临时，不会绑定到非常量
                             值引用(默认情况下为 C++20 或更高版本，由 /permissive-隐含)
       twoPhase-             禁用两阶段名称查找
       ternary[-]            对条件运算符强制执行 C++11 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
       alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
       hiddenFriend[-]       强制执行标准 C++ 隐藏友元规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       externC[-]            对 'extern "C"' 函数强制执行标准 C++ 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
       zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
       static_assert[-]      严格处理 "static_assert" (在 C++20 或更高版本中默认处于打开状态，
                             由 /permissive- 隐含)
       gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
       templateScope[-]      强制执行标准 C++ 模板参数阴影规则
       enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
       checkGwOdr[-]         强制实施标准 C++ 一个定义规则违反
                             启用 /Gw 时(默认关闭)
       nrvo[-]               启用可选复制和移动消除(在 C++20 或更高版本中默认开启，
                             由 /permissive 或 /O2 隐含)
       __STDC__在 C 中将 __STDC__ 定义为 1
       __cplusplus[-]        __cplusplus 宏报告支持的 C++ 标准(默认关闭)
       char8_t[-]            将 C++20 本机`u8`文本支持启用为`const char8_t`
                             (默认情况下为 C++20 或更高版本)
       externConstexpr[-]    为 C++ 中的 constexpr 变量启用外部链接
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       preprocessor[-]       在 C/C++ 中启用标准一致性预处理器
                             (默认情况下为 C11 或更高版本)
      /ZI 启用“编辑并继续”调试信息          /openmp 启用 OpenMP 2.0 语言扩展
      /openmp:experimental 会启用 OpenMP 2.0 语言扩展并选择 OpenMP 3.0+ 语言扩展
      使用 LLVM 运行时 /openmp:llvm OpenMP 语言扩展
      
                     - 杂项 -
      
      @<file> 选项响应文件                    /?, /help 打印此帮助消息
      /bigobj 生成扩展的对象格式              /c 只编译，不链接
      /FC 诊断中使用完整路径名                /H<num> 最大外部名称长度
      /J 默认 char 类型是 unsigned            /MP[n] 最多使用“n”个进程进行编译
      /nologo 取消显示版权信息                /showIncludes 显示包含文件名
      /Tc<source file> 将文件编译为 .c        /Tp<source file> 将文件编译为 .cpp
      /TC 将所有文件编译为 .c                 /TP 将所有文件编译为 .cpp
      /V<string> 设置版本字符串               /Yc[file] 创建 .PCH 文件
      /Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
      /Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
      /Zm<n> 最大内存分配(默认值的百分比)     /FS 强制使用 MSPDBSRV.EXE
      /source-charset:<iana-name>|.nnnn 集源字符集
      /execution-charset:<iana-name>|.nnnn 集执行字符集
      /utf-8 集源和到 UTF-8 的执行字符集      
      /validate-charset[-] 验证 UTF-8 文件是否只有合法字符
      /fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
      /presetPadding[-] 将基于堆栈的类类型的填充初始化为零
      /volatileMetadata[-] 对易失存储器访问生成元数据
      /sourcelink [file] 包含源链接信息的文件 
      
                      -链接-
      
      /LD 创建 .DLL                           /LDd 创建 .DLL 调试库
      /LN 创建 .netmodule                     /F<num> 设置堆栈大小
      /link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
      /MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTD.LIB 调试库链接
      /MTd 与 LIBCMTD.LIB 调试库链接          
      
                     -代码分析-
      
      /analyze[-] 启用本机分析                /analyze:quiet[-] 没有对控制台的警告
      /analyze:log<name> 对文件的警告         /analyze:autolog Log to *.pftlog
      /analyze:autolog:ext<ext> Log to *.<ext>/analyze:autolog- 无日志文件
      /analyze:WX- 警告不严重                 /analyze:stacksize<num> 最大堆栈帧
      /analyze:max_paths<num> 最大路径        /analyze:only Analyze, no code gen
      
                                    -诊断-
      
      /diagnostics:<args,...> 控制诊断消息的格式:
                   传统型 - 保留之前的格式
                   列[-] - 打印列信息
                   脱字号[-] - 打印列和源的指示行
      /Wall 启用所有警告                      /w   禁用所有警告
      /W<n> 设置警告等级(默认 n=1)            
      /Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
      /WX 将警告视为错误                      /WL 启用单行诊断
      /wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
      /wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
      /external:I <path>      - 外部标头的位置
      /external:env:<var>    - 外部标头位置的环境变量
      /external:anglebrackets - 将所有通过 <> 包含的标头视为外部
      /external:W<n>          - 外部标头的警告等级
      /external:templates[-]  - 跨模板实例化链评估警告级别
      /sdl 支持其他安全功能和警告             
      /选项: 严格无法识别的编译器选项是一个错误
      
...

---
events:
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:233 (message)"
      - "CMakeLists.txt:3 (project)"
    message: |
      The system is: Windows - 10.0.26100 - AMD64
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/4 21:54:59銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdC.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TC /FC /errorReport:queue CMakeCCompilerId.c
        CMakeCCompilerId.c
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdC.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdC.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdC.lib" /MACHINE:X64 Debug\\CMakeCCompilerId.obj
        CompilerIdC.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_C_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.68
      
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.exe"
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.vcxproj"
      
      The C compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdC/CompilerIdC.exe
      
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCXXCompiler.cmake:126 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/4 21:54:59銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdCXX.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TP /FC /errorReport:queue CMakeCXXCompilerId.cpp
        CMakeCXXCompilerId.cpp
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdCXX.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdCXX.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdCXX.lib" /MACHINE:X64 Debug\\CMakeCXXCompilerId.obj
        CompilerIdCXX.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_CXX_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_CXX_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\CompilerIdCXX.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.42
      
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.exe"
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.vcxproj"
      
      The CXX compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdCXX/CompilerIdCXX.exe
      
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting C compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-3yv0zw"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-3yv0zw"
    cmakeVariables:
      CMAKE_C_FLAGS: "/DWIN32 /D_WINDOWS"
      CMAKE_C_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_C_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-3yv0zw'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_0827c.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/4 21:55:00銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-3yv0zw\\cmTC_0827c.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_0827c.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-3yv0zw\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_0827c.dir\\Debug\\cmTC_0827c.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_0827c.dir\\Debug\\cmTC_0827c.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_0827c.dir\\Debug\\cmTC_0827c.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_0827c.dir\\Debug\\\\" /Fd"cmTC_0827c.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_0827c.dir\\Debug\\\\" /Fd"cmTC_0827c.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          CMakeCCompilerABI.c
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-3yv0zw\\Debug\\cmTC_0827c.exe" /INCREMENTAL /ILK:"cmTC_0827c.dir\\Debug\\cmTC_0827c.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-3yv0zw/Debug/cmTC_0827c.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-3yv0zw/Debug/cmTC_0827c.lib" /MACHINE:X64  /machine:x64 cmTC_0827c.dir\\Debug\\CMakeCCompilerABI.obj
          cmTC_0827c.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-3yv0zw\\Debug\\cmTC_0827c.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_0827c.dir\\Debug\\cmTC_0827c.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_0827c.dir\\Debug\\cmTC_0827c.tlog\\cmTC_0827c.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-3yv0zw\\cmTC_0827c.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.42
        
      exitCode: 0
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCXXCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting CXX compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-b0axwu"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-b0axwu"
    cmakeVariables:
      CMAKE_CXX_FLAGS: "/DWIN32 /D_WINDOWS /EHsc"
      CMAKE_CXX_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_CXX_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-b0axwu'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_052a0.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/4 21:55:01銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-b0axwu\\cmTC_052a0.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_052a0.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-b0axwu\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_052a0.dir\\Debug\\cmTC_052a0.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_052a0.dir\\Debug\\cmTC_052a0.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_052a0.dir\\Debug\\cmTC_052a0.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_052a0.dir\\Debug\\\\" /Fd"cmTC_052a0.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_052a0.dir\\Debug\\\\" /Fd"cmTC_052a0.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          CMakeCXXCompilerABI.cpp
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-b0axwu\\Debug\\cmTC_052a0.exe" /INCREMENTAL /ILK:"cmTC_052a0.dir\\Debug\\cmTC_052a0.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-b0axwu/Debug/cmTC_052a0.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-b0axwu/Debug/cmTC_052a0.lib" /MACHINE:X64  /machine:x64 cmTC_052a0.dir\\Debug\\CMakeCXXCompilerABI.obj
          cmTC_052a0.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-b0axwu\\Debug\\cmTC_052a0.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_052a0.dir\\Debug\\cmTC_052a0.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_052a0.dir\\Debug\\cmTC_052a0.tlog\\cmTC_052a0.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-b0axwu\\cmTC_052a0.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.36
        
      exitCode: 0
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple (clang|LLVM) version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is OrangeC using "--version" did not match "occ \\(OrangeC\\) Version":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is HP using "-V" did not match "HP C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is IntelLLVM using "--version" did not match "(Intel[^
      ]+oneAPI)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“-qversion”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1131 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is MSVC using "-?" matched "Microsoft":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
                   C/C++ 编译器选项
      
      
                     -优化-
      
      /O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
      /Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
      /Og 启用全局优化                        /Oi[-] 启用内部函数
      /Os 优选代码空间                        /Ot 优选代码速度
      /Ox 优化(优选速度)                      
      /favor:<blend|AMD64|INTEL64|ATOM> 选择优化所针对的处理器，为以下值之一:
         blend - 针对几种不同 x64 处理器的优化组合
         AMD64 - 64 位 AMD 处理器
         INTEL64 - Intel(R)64 架构处理器
         ATOM - Intel(R) Atom(TM) 处理器
      
                     -代码生成-
      
      /Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
      /GF 启用只读字符串池                    /Gy[-] 分隔链接器函数
      /GS[-] 启用安全检查                     /GR[-] 启用 C++ RTTI
      /guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
      /EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
      /EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
      /fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
         协定 - 生成代码时考虑浮点收缩
         except[-] - 在生成代码时考虑浮点异常
         fast - "fast" 浮点模型；结果可预测性比较低
         precise - "precise" 浮点模型；结果可预测
         strict - "strict" 浮点模型(意味着 /fp:except)
      即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
      /Qspectre[-] 对 CVE 2017-5753 启用缓解措施
      /Qpar[-] 启用并行代码生成               
      /Qpar-report:1 自动并行化诊断；指示已并行化循环
      /Qpar-report:2 自动并行化诊断；指示未并行化循环
      /Qvec-report:1 自动向量化诊断；指示已向量化循环
      /Qvec-report:2 自动向量化诊断；指示未向量化循环
      /GL[-] 启用链接时代码生成               
      /volatile:<iso|ms> 选择可变模型:
         iso - Acquire/release 语义对可变访问不一定有效
         ms - Acquire/release 语义对可变访问一定有效
      /GA 为 Windows 应用程序进行优化         /Ge 对所有函数强制堆栈检查
      /Gs[num] 控制堆栈检查调用               /Gh 启用 _penter 函数调用
      /GH 启用 _pexit 函数调用                /GT 生成纤程安全 TLS 访问
      /RTC1 启用快速检查(/RTCsu)              /RTCc 转换为较小的类型检查
      /RTCs 堆栈帧运行时检查                  /RTCu 未初始化的局部用法检查
      /clr[：option] 编译公共语言运行时，其中选项为：
          pure ： 生成仅 IL 的输出文件 (没有本机可执行代码)
          安全 ： 生成仅 IL 可验证的输出文件
          netcore ： 生成面向 .NET Core 运行时的程序集
          noAssembly ： 不生成程序集
          nostdlib ： 搜索程序集时忽略系统 .NET Framework 目录
          nostdimport ： 不隐式导入任何必需的程序集
          initialAppDomain ： 启用 Visual C++ 2002 的初始 AppDomain 行为
          implicitKeepAlive- ： 关闭 System：：GC：：KeepAlive 的隐式发出(此)
          char_t- ： 关闭对char8_t、char16_t和char32_t的元数据支持
          ECMAParamArray ： 对参数数组的重载使用 ECMA-372/372/14.6 中指定的规则 (/clr)
          ECMAParamArray- 使用带有参数数组的新规则，(/clr：netcore)
      /fsanitize=解决启用地址消毒代码生成     
      /homeparams 强制将传入寄存器的参数写入到堆栈中
      /GZ 启用堆栈检查(/RTCs)                 /Gv __vectorcall 调用约定
      (预览版)/dynamicdeopt 启用动态调试；放置取消优化的断点，并通过按需函数取消优化随时随地单步执行
      (预览) /dynamicdeopt:suffix <suffix> 用于去优化输出的文件扩展名后缀(默认值: .alt)
      (预览) /dynamicdeopt:sync 在生成优化输出后生成去优化输出，而不是并行生成
      /arch:<SSE2|SSE4.2|AVX|AVX2|AVX512|AVX10.x> 最低 CPU 体系结构要求，以下之一:
         SSE2 - (默认)允许使用通过支持 SSE2 的 CPU 提供的指令
         SSE4.2 - 允许使用通过支持 SSE4.2 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX 的 CPU 提供的指令
         AVX2 - 允许使用通过支持 AVX2 的 CPU 提供的指令
         AVX512 - 允许使用通过支持 AVX-512 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX10.x 的 CPU 提供的指令。x 的有效值为 1
      /QIntel-jcc-erratum 为 Intel JCC Erratum 启用缓解措施
      /Qspectre-load 对加载内存的所有指令启用 spectre 缓解措施
      /Qspectre-load-cf 对加载内存的所有控制流指令启用 spectre 缓解措施
      /Qspectre-jmp[-] 为无条件跳转指令启用 Spectre 缓解
      /fpcvt:<IA|BC> 无符号整数转换兼容性为 FP
        IA - 与 VCVTTSD2USI 指令兼容的结果
        BC - 与 VS2017 及更低版本的编译器兼容的结果
      /jumptablerdata 在 .rdata 部分中放置 switch case 语句的跳转表
      /vlen=<256|512> 为自动代码生成选择 256 或 512 的矢量长度
      /vlen 根据 /arch 设置选择默认矢量长度   
      
                     -输出文件-
      
      /Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
      /Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
      /Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
      /Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
      /FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
      /Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
      /Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
      /Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
      /Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址
      /doc[file] 处理 XML 文档注释，并可选择命名 .xdc 文件
      
                     -预处理器-
      
      /AI<dir> 添加到程序集搜索路径           /FU<file> 导入 .NET 程序集/模块
      /FU:asFriend<file> 将 .NET 程序集/模块导入为友元
      /C 不抽出注释                           /D<name>{=|#}<text> 定义宏
      /E 预处理到 stdout                      /EP 预处理到 stdout，无行号
      /P 预处理到文件                         /Fx 将插入的代码合并到文件中
      /FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
      /u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
      /X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
      /PD 打印所有宏定义                      
      
                      -语言-
      
      /std:<c++14|c++17|c++20|c++latest> C++ 标准版
          c++14 - ISO/IEC 14882:2014 (默认值)
          c++17 - ISO/IEC 14882:2017
          c++20 - ISO/IEC 14882:2020
          c++latest - 最新草案标准(功能集可能更改)
      /std:<c11|c17|clatest> C 标准版本
         c11 - ISO/IEC 9899:2011
         c17 - ISO/IEC 9899:2018
         clatest - 最新草稿标准(功能集可能会更改)
      /permissive[-] 启用一些不符合格式的代码进行编译
                    (功能集可能会更改)(在 C++20 及更高版本中默认关闭)
      /Za 禁用扩展(不建议用于 C++)            /ZW 启用 WinRT 语言扩展
      /Zs 只进行语法检查                      
      /await 启用可恢复函数扩展
      /await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
      /constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
      /constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
      /constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 1048576)
      /Zi 启用调试信息                        /Z7 启用旧式调试信息
      /Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
      /ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
      /Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
      /vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
      /Zc:arg1[,arg2] 语言一致性，这里的参数可以是:
       forScope[-]      对范围规则强制使用标准 C++
       wchar_t[-]      wchar_t 是本机类型，不是 typedef
       auto[-]               对 auto 强制使用新的标准 C++ 含义
       trigraphs[-]          启用三元祖(默认关闭)
       rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       strictStrings[-]      禁用字符串文本到 [char|wchar_t]*
                             转换(在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
       threadSafeInit[-]   启用线程安全的本地静态初始化
       inline[-]             删除未引用的函数或数据，如果其为
                             COMDAT 或仅具有内部链接(默认情况下关闭)
       sizedDealloc[-]       启用 C++14 全局大小的解除分配
                             函数(默认启用)
       throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
       referenceBinding[-]   临时，不会绑定到非常量
                             值引用(默认情况下为 C++20 或更高版本，由 /permissive-隐含)
       twoPhase-             禁用两阶段名称查找
       ternary[-]            对条件运算符强制执行 C++11 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
       alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
       hiddenFriend[-]       强制执行标准 C++ 隐藏友元规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       externC[-]            对 'extern "C"' 函数强制执行标准 C++ 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
       zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
       static_assert[-]      严格处理 "static_assert" (在 C++20 或更高版本中默认处于打开状态，
                             由 /permissive- 隐含)
       gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
       templateScope[-]      强制执行标准 C++ 模板参数阴影规则
       enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
       checkGwOdr[-]         强制实施标准 C++ 一个定义规则违反
                             启用 /Gw 时(默认关闭)
       nrvo[-]               启用可选复制和移动消除(在 C++20 或更高版本中默认开启，
                             由 /permissive 或 /O2 隐含)
       __STDC__在 C 中将 __STDC__ 定义为 1
       __cplusplus[-]        __cplusplus 宏报告支持的 C++ 标准(默认关闭)
       char8_t[-]            将 C++20 本机`u8`文本支持启用为`const char8_t`
                             (默认情况下为 C++20 或更高版本)
       externConstexpr[-]    为 C++ 中的 constexpr 变量启用外部链接
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       preprocessor[-]       在 C/C++ 中启用标准一致性预处理器
                             (默认情况下为 C11 或更高版本)
      /ZI 启用“编辑并继续”调试信息          /openmp 启用 OpenMP 2.0 语言扩展
      /openmp:experimental 会启用 OpenMP 2.0 语言扩展并选择 OpenMP 3.0+ 语言扩展
      使用 LLVM 运行时 /openmp:llvm OpenMP 语言扩展
      
                     - 杂项 -
      
      @<file> 选项响应文件                    /?, /help 打印此帮助消息
      /bigobj 生成扩展的对象格式              /c 只编译，不链接
      /FC 诊断中使用完整路径名                /H<num> 最大外部名称长度
      /J 默认 char 类型是 unsigned            /MP[n] 最多使用“n”个进程进行编译
      /nologo 取消显示版权信息                /showIncludes 显示包含文件名
      /Tc<source file> 将文件编译为 .c        /Tp<source file> 将文件编译为 .cpp
      /TC 将所有文件编译为 .c                 /TP 将所有文件编译为 .cpp
      /V<string> 设置版本字符串               /Yc[file] 创建 .PCH 文件
      /Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
      /Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
      /Zm<n> 最大内存分配(默认值的百分比)     /FS 强制使用 MSPDBSRV.EXE
      /source-charset:<iana-name>|.nnnn 集源字符集
      /execution-charset:<iana-name>|.nnnn 集执行字符集
      /utf-8 集源和到 UTF-8 的执行字符集      
      /validate-charset[-] 验证 UTF-8 文件是否只有合法字符
      /fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
      /presetPadding[-] 将基于堆栈的类类型的填充初始化为零
      /volatileMetadata[-] 对易失存储器访问生成元数据
      /sourcelink [file] 包含源链接信息的文件 
      
                      -链接-
      
      /LD 创建 .DLL                           /LDd 创建 .DLL 调试库
      /LN 创建 .netmodule                     /F<num> 设置堆栈大小
      /link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
      /MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTD.LIB 调试库链接
      /MTd 与 LIBCMTD.LIB 调试库链接          
      
                     -代码分析-
      
      /analyze[-] 启用本机分析                /analyze:quiet[-] 没有对控制台的警告
      /analyze:log<name> 对文件的警告         /analyze:autolog Log to *.pftlog
      /analyze:autolog:ext<ext> Log to *.<ext>/analyze:autolog- 无日志文件
      /analyze:WX- 警告不严重                 /analyze:stacksize<num> 最大堆栈帧
      /analyze:max_paths<num> 最大路径        /analyze:only Analyze, no code gen
      
                                    -诊断-
      
      /diagnostics:<args,...> 控制诊断消息的格式:
                   传统型 - 保留之前的格式
                   列[-] - 打印列信息
                   脱字号[-] - 打印列和源的指示行
      /Wall 启用所有警告                      /w   禁用所有警告
      /W<n> 设置警告等级(默认 n=1)            
      /Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
      /WX 将警告视为错误                      /WL 启用单行诊断
      /wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
      /wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
      /external:I <path>      - 外部标头的位置
      /external:env:<var>    - 外部标头位置的环境变量
      /external:anglebrackets - 将所有通过 <> 包含的标头视为外部
      /external:W<n>          - 外部标头的警告等级
      /external:templates[-]  - 跨模板实例化链评估警告级别
      /sdl 支持其他安全功能和警告             
      /选项: 严格无法识别的编译器选项是一个错误
      
...

---
events:
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:233 (message)"
      - "CMakeLists.txt:3 (project)"
    message: |
      The system is: Windows - 10.0.26100 - AMD64
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/5 19:43:45銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdC.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TC /FC /errorReport:queue CMakeCCompilerId.c
        CMakeCCompilerId.c
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdC.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdC.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdC.lib" /MACHINE:X64 Debug\\CMakeCCompilerId.obj
        CompilerIdC.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_C_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:01.05
      
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.exe"
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.vcxproj"
      
      The C compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdC/CompilerIdC.exe
      
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCXXCompiler.cmake:126 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/5 19:43:46銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdCXX.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TP /FC /errorReport:queue CMakeCXXCompilerId.cpp
        CMakeCXXCompilerId.cpp
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdCXX.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdCXX.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdCXX.lib" /MACHINE:X64 Debug\\CMakeCXXCompilerId.obj
        CompilerIdCXX.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_CXX_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_CXX_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\CompilerIdCXX.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.54
      
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.exe"
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.vcxproj"
      
      The CXX compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdCXX/CompilerIdCXX.exe
      
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting C compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-42myqv"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-42myqv"
    cmakeVariables:
      CMAKE_C_FLAGS: "/DWIN32 /D_WINDOWS"
      CMAKE_C_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_C_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-42myqv'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_ff92c.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/5 19:43:48銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-42myqv\\cmTC_ff92c.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_ff92c.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-42myqv\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_ff92c.dir\\Debug\\cmTC_ff92c.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_ff92c.dir\\Debug\\cmTC_ff92c.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_ff92c.dir\\Debug\\cmTC_ff92c.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_ff92c.dir\\Debug\\\\" /Fd"cmTC_ff92c.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_ff92c.dir\\Debug\\\\" /Fd"cmTC_ff92c.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          CMakeCCompilerABI.c
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-42myqv\\Debug\\cmTC_ff92c.exe" /INCREMENTAL /ILK:"cmTC_ff92c.dir\\Debug\\cmTC_ff92c.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-42myqv/Debug/cmTC_ff92c.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-42myqv/Debug/cmTC_ff92c.lib" /MACHINE:X64  /machine:x64 cmTC_ff92c.dir\\Debug\\CMakeCCompilerABI.obj
          cmTC_ff92c.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-42myqv\\Debug\\cmTC_ff92c.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_ff92c.dir\\Debug\\cmTC_ff92c.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_ff92c.dir\\Debug\\cmTC_ff92c.tlog\\cmTC_ff92c.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-42myqv\\cmTC_ff92c.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.45
        
      exitCode: 0
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCXXCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting CXX compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-11vc21"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-11vc21"
    cmakeVariables:
      CMAKE_CXX_FLAGS: "/DWIN32 /D_WINDOWS /EHsc"
      CMAKE_CXX_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_CXX_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-11vc21'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_d9d6b.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/5 19:43:49銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-11vc21\\cmTC_d9d6b.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_d9d6b.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-11vc21\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_d9d6b.dir\\Debug\\cmTC_d9d6b.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_d9d6b.dir\\Debug\\cmTC_d9d6b.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_d9d6b.dir\\Debug\\cmTC_d9d6b.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_d9d6b.dir\\Debug\\\\" /Fd"cmTC_d9d6b.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_d9d6b.dir\\Debug\\\\" /Fd"cmTC_d9d6b.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          CMakeCXXCompilerABI.cpp
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-11vc21\\Debug\\cmTC_d9d6b.exe" /INCREMENTAL /ILK:"cmTC_d9d6b.dir\\Debug\\cmTC_d9d6b.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-11vc21/Debug/cmTC_d9d6b.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-11vc21/Debug/cmTC_d9d6b.lib" /MACHINE:X64  /machine:x64 cmTC_d9d6b.dir\\Debug\\CMakeCXXCompilerABI.obj
          cmTC_d9d6b.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-11vc21\\Debug\\cmTC_d9d6b.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_d9d6b.dir\\Debug\\cmTC_d9d6b.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_d9d6b.dir\\Debug\\cmTC_d9d6b.tlog\\cmTC_d9d6b.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-11vc21\\cmTC_d9d6b.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.54
        
      exitCode: 0
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple (clang|LLVM) version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is OrangeC using "--version" did not match "occ \\(OrangeC\\) Version":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is HP using "-V" did not match "HP C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is IntelLLVM using "--version" did not match "(Intel[^
      ]+oneAPI)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“-qversion”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1131 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is MSVC using "-?" matched "Microsoft":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
                   C/C++ 编译器选项
      
      
                     -优化-
      
      /O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
      /Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
      /Og 启用全局优化                        /Oi[-] 启用内部函数
      /Os 优选代码空间                        /Ot 优选代码速度
      /Ox 优化(优选速度)                      
      /favor:<blend|AMD64|INTEL64|ATOM> 选择优化所针对的处理器，为以下值之一:
         blend - 针对几种不同 x64 处理器的优化组合
         AMD64 - 64 位 AMD 处理器
         INTEL64 - Intel(R)64 架构处理器
         ATOM - Intel(R) Atom(TM) 处理器
      
                     -代码生成-
      
      /Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
      /GF 启用只读字符串池                    /Gy[-] 分隔链接器函数
      /GS[-] 启用安全检查                     /GR[-] 启用 C++ RTTI
      /guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
      /EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
      /EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
      /fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
         协定 - 生成代码时考虑浮点收缩
         except[-] - 在生成代码时考虑浮点异常
         fast - "fast" 浮点模型；结果可预测性比较低
         precise - "precise" 浮点模型；结果可预测
         strict - "strict" 浮点模型(意味着 /fp:except)
      即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
      /Qspectre[-] 对 CVE 2017-5753 启用缓解措施
      /Qpar[-] 启用并行代码生成               
      /Qpar-report:1 自动并行化诊断；指示已并行化循环
      /Qpar-report:2 自动并行化诊断；指示未并行化循环
      /Qvec-report:1 自动向量化诊断；指示已向量化循环
      /Qvec-report:2 自动向量化诊断；指示未向量化循环
      /GL[-] 启用链接时代码生成               
      /volatile:<iso|ms> 选择可变模型:
         iso - Acquire/release 语义对可变访问不一定有效
         ms - Acquire/release 语义对可变访问一定有效
      /GA 为 Windows 应用程序进行优化         /Ge 对所有函数强制堆栈检查
      /Gs[num] 控制堆栈检查调用               /Gh 启用 _penter 函数调用
      /GH 启用 _pexit 函数调用                /GT 生成纤程安全 TLS 访问
      /RTC1 启用快速检查(/RTCsu)              /RTCc 转换为较小的类型检查
      /RTCs 堆栈帧运行时检查                  /RTCu 未初始化的局部用法检查
      /clr[：option] 编译公共语言运行时，其中选项为：
          pure ： 生成仅 IL 的输出文件 (没有本机可执行代码)
          安全 ： 生成仅 IL 可验证的输出文件
          netcore ： 生成面向 .NET Core 运行时的程序集
          noAssembly ： 不生成程序集
          nostdlib ： 搜索程序集时忽略系统 .NET Framework 目录
          nostdimport ： 不隐式导入任何必需的程序集
          initialAppDomain ： 启用 Visual C++ 2002 的初始 AppDomain 行为
          implicitKeepAlive- ： 关闭 System：：GC：：KeepAlive 的隐式发出(此)
          char_t- ： 关闭对char8_t、char16_t和char32_t的元数据支持
          ECMAParamArray ： 对参数数组的重载使用 ECMA-372/372/14.6 中指定的规则 (/clr)
          ECMAParamArray- 使用带有参数数组的新规则，(/clr：netcore)
      /fsanitize=解决启用地址消毒代码生成     
      /homeparams 强制将传入寄存器的参数写入到堆栈中
      /GZ 启用堆栈检查(/RTCs)                 /Gv __vectorcall 调用约定
      (预览版)/dynamicdeopt 启用动态调试；放置取消优化的断点，并通过按需函数取消优化随时随地单步执行
      (预览) /dynamicdeopt:suffix <suffix> 用于去优化输出的文件扩展名后缀(默认值: .alt)
      (预览) /dynamicdeopt:sync 在生成优化输出后生成去优化输出，而不是并行生成
      /arch:<SSE2|SSE4.2|AVX|AVX2|AVX512|AVX10.x> 最低 CPU 体系结构要求，以下之一:
         SSE2 - (默认)允许使用通过支持 SSE2 的 CPU 提供的指令
         SSE4.2 - 允许使用通过支持 SSE4.2 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX 的 CPU 提供的指令
         AVX2 - 允许使用通过支持 AVX2 的 CPU 提供的指令
         AVX512 - 允许使用通过支持 AVX-512 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX10.x 的 CPU 提供的指令。x 的有效值为 1
      /QIntel-jcc-erratum 为 Intel JCC Erratum 启用缓解措施
      /Qspectre-load 对加载内存的所有指令启用 spectre 缓解措施
      /Qspectre-load-cf 对加载内存的所有控制流指令启用 spectre 缓解措施
      /Qspectre-jmp[-] 为无条件跳转指令启用 Spectre 缓解
      /fpcvt:<IA|BC> 无符号整数转换兼容性为 FP
        IA - 与 VCVTTSD2USI 指令兼容的结果
        BC - 与 VS2017 及更低版本的编译器兼容的结果
      /jumptablerdata 在 .rdata 部分中放置 switch case 语句的跳转表
      /vlen=<256|512> 为自动代码生成选择 256 或 512 的矢量长度
      /vlen 根据 /arch 设置选择默认矢量长度   
      
                     -输出文件-
      
      /Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
      /Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
      /Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
      /Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
      /FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
      /Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
      /Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
      /Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
      /Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址
      /doc[file] 处理 XML 文档注释，并可选择命名 .xdc 文件
      
                     -预处理器-
      
      /AI<dir> 添加到程序集搜索路径           /FU<file> 导入 .NET 程序集/模块
      /FU:asFriend<file> 将 .NET 程序集/模块导入为友元
      /C 不抽出注释                           /D<name>{=|#}<text> 定义宏
      /E 预处理到 stdout                      /EP 预处理到 stdout，无行号
      /P 预处理到文件                         /Fx 将插入的代码合并到文件中
      /FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
      /u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
      /X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
      /PD 打印所有宏定义                      
      
                      -语言-
      
      /std:<c++14|c++17|c++20|c++latest> C++ 标准版
          c++14 - ISO/IEC 14882:2014 (默认值)
          c++17 - ISO/IEC 14882:2017
          c++20 - ISO/IEC 14882:2020
          c++latest - 最新草案标准(功能集可能更改)
      /std:<c11|c17|clatest> C 标准版本
         c11 - ISO/IEC 9899:2011
         c17 - ISO/IEC 9899:2018
         clatest - 最新草稿标准(功能集可能会更改)
      /permissive[-] 启用一些不符合格式的代码进行编译
                    (功能集可能会更改)(在 C++20 及更高版本中默认关闭)
      /Za 禁用扩展(不建议用于 C++)            /ZW 启用 WinRT 语言扩展
      /Zs 只进行语法检查                      
      /await 启用可恢复函数扩展
      /await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
      /constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
      /constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
      /constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 1048576)
      /Zi 启用调试信息                        /Z7 启用旧式调试信息
      /Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
      /ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
      /Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
      /vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
      /Zc:arg1[,arg2] 语言一致性，这里的参数可以是:
       forScope[-]      对范围规则强制使用标准 C++
       wchar_t[-]      wchar_t 是本机类型，不是 typedef
       auto[-]               对 auto 强制使用新的标准 C++ 含义
       trigraphs[-]          启用三元祖(默认关闭)
       rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       strictStrings[-]      禁用字符串文本到 [char|wchar_t]*
                             转换(在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
       threadSafeInit[-]   启用线程安全的本地静态初始化
       inline[-]             删除未引用的函数或数据，如果其为
                             COMDAT 或仅具有内部链接(默认情况下关闭)
       sizedDealloc[-]       启用 C++14 全局大小的解除分配
                             函数(默认启用)
       throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
       referenceBinding[-]   临时，不会绑定到非常量
                             值引用(默认情况下为 C++20 或更高版本，由 /permissive-隐含)
       twoPhase-             禁用两阶段名称查找
       ternary[-]            对条件运算符强制执行 C++11 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
       alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
       hiddenFriend[-]       强制执行标准 C++ 隐藏友元规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       externC[-]            对 'extern "C"' 函数强制执行标准 C++ 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
       zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
       static_assert[-]      严格处理 "static_assert" (在 C++20 或更高版本中默认处于打开状态，
                             由 /permissive- 隐含)
       gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
       templateScope[-]      强制执行标准 C++ 模板参数阴影规则
       enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
       checkGwOdr[-]         强制实施标准 C++ 一个定义规则违反
                             启用 /Gw 时(默认关闭)
       nrvo[-]               启用可选复制和移动消除(在 C++20 或更高版本中默认开启，
                             由 /permissive 或 /O2 隐含)
       __STDC__在 C 中将 __STDC__ 定义为 1
       __cplusplus[-]        __cplusplus 宏报告支持的 C++ 标准(默认关闭)
       char8_t[-]            将 C++20 本机`u8`文本支持启用为`const char8_t`
                             (默认情况下为 C++20 或更高版本)
       externConstexpr[-]    为 C++ 中的 constexpr 变量启用外部链接
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       preprocessor[-]       在 C/C++ 中启用标准一致性预处理器
                             (默认情况下为 C11 或更高版本)
      /ZI 启用“编辑并继续”调试信息          /openmp 启用 OpenMP 2.0 语言扩展
      /openmp:experimental 会启用 OpenMP 2.0 语言扩展并选择 OpenMP 3.0+ 语言扩展
      使用 LLVM 运行时 /openmp:llvm OpenMP 语言扩展
      
                     - 杂项 -
      
      @<file> 选项响应文件                    /?, /help 打印此帮助消息
      /bigobj 生成扩展的对象格式              /c 只编译，不链接
      /FC 诊断中使用完整路径名                /H<num> 最大外部名称长度
      /J 默认 char 类型是 unsigned            /MP[n] 最多使用“n”个进程进行编译
      /nologo 取消显示版权信息                /showIncludes 显示包含文件名
      /Tc<source file> 将文件编译为 .c        /Tp<source file> 将文件编译为 .cpp
      /TC 将所有文件编译为 .c                 /TP 将所有文件编译为 .cpp
      /V<string> 设置版本字符串               /Yc[file] 创建 .PCH 文件
      /Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
      /Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
      /Zm<n> 最大内存分配(默认值的百分比)     /FS 强制使用 MSPDBSRV.EXE
      /source-charset:<iana-name>|.nnnn 集源字符集
      /execution-charset:<iana-name>|.nnnn 集执行字符集
      /utf-8 集源和到 UTF-8 的执行字符集      
      /validate-charset[-] 验证 UTF-8 文件是否只有合法字符
      /fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
      /presetPadding[-] 将基于堆栈的类类型的填充初始化为零
      /volatileMetadata[-] 对易失存储器访问生成元数据
      /sourcelink [file] 包含源链接信息的文件 
      
                      -链接-
      
      /LD 创建 .DLL                           /LDd 创建 .DLL 调试库
      /LN 创建 .netmodule                     /F<num> 设置堆栈大小
      /link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
      /MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTD.LIB 调试库链接
      /MTd 与 LIBCMTD.LIB 调试库链接          
      
                     -代码分析-
      
      /analyze[-] 启用本机分析                /analyze:quiet[-] 没有对控制台的警告
      /analyze:log<name> 对文件的警告         /analyze:autolog Log to *.pftlog
      /analyze:autolog:ext<ext> Log to *.<ext>/analyze:autolog- 无日志文件
      /analyze:WX- 警告不严重                 /analyze:stacksize<num> 最大堆栈帧
      /analyze:max_paths<num> 最大路径        /analyze:only Analyze, no code gen
      
                                    -诊断-
      
      /diagnostics:<args,...> 控制诊断消息的格式:
                   传统型 - 保留之前的格式
                   列[-] - 打印列信息
                   脱字号[-] - 打印列和源的指示行
      /Wall 启用所有警告                      /w   禁用所有警告
      /W<n> 设置警告等级(默认 n=1)            
      /Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
      /WX 将警告视为错误                      /WL 启用单行诊断
      /wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
      /wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
      /external:I <path>      - 外部标头的位置
      /external:env:<var>    - 外部标头位置的环境变量
      /external:anglebrackets - 将所有通过 <> 包含的标头视为外部
      /external:W<n>          - 外部标头的警告等级
      /external:templates[-]  - 跨模板实例化链评估警告级别
      /sdl 支持其他安全功能和警告             
      /选项: 严格无法识别的编译器选项是一个错误
      
...

---
events:
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:233 (message)"
      - "CMakeLists.txt:3 (project)"
    message: |
      The system is: Windows - 10.0.26100 - AMD64
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/5 21:21:07銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdC.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TC /FC /errorReport:queue CMakeCCompilerId.c
        CMakeCCompilerId.c
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdC.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdC.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdC.lib" /MACHINE:X64 Debug\\CMakeCCompilerId.obj
        CompilerIdC.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_C_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.71
      
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.exe"
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.vcxproj"
      
      The C compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdC/CompilerIdC.exe
      
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCXXCompiler.cmake:126 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/5 21:21:08銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdCXX.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TP /FC /errorReport:queue CMakeCXXCompilerId.cpp
        CMakeCXXCompilerId.cpp
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdCXX.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdCXX.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdCXX.lib" /MACHINE:X64 Debug\\CMakeCXXCompilerId.obj
        CompilerIdCXX.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_CXX_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_CXX_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\CompilerIdCXX.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.57
      
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.exe"
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.vcxproj"
      
      The CXX compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdCXX/CompilerIdCXX.exe
      
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting C compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-iyyttf"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-iyyttf"
    cmakeVariables:
      CMAKE_C_FLAGS: "/DWIN32 /D_WINDOWS"
      CMAKE_C_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_C_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-iyyttf'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_3dadf.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/5 21:21:09銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-iyyttf\\cmTC_3dadf.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_3dadf.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-iyyttf\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_3dadf.dir\\Debug\\cmTC_3dadf.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_3dadf.dir\\Debug\\cmTC_3dadf.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_3dadf.dir\\Debug\\cmTC_3dadf.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_3dadf.dir\\Debug\\\\" /Fd"cmTC_3dadf.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_3dadf.dir\\Debug\\\\" /Fd"cmTC_3dadf.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          CMakeCCompilerABI.c
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-iyyttf\\Debug\\cmTC_3dadf.exe" /INCREMENTAL /ILK:"cmTC_3dadf.dir\\Debug\\cmTC_3dadf.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-iyyttf/Debug/cmTC_3dadf.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-iyyttf/Debug/cmTC_3dadf.lib" /MACHINE:X64  /machine:x64 cmTC_3dadf.dir\\Debug\\CMakeCCompilerABI.obj
          cmTC_3dadf.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-iyyttf\\Debug\\cmTC_3dadf.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_3dadf.dir\\Debug\\cmTC_3dadf.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_3dadf.dir\\Debug\\cmTC_3dadf.tlog\\cmTC_3dadf.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-iyyttf\\cmTC_3dadf.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.41
        
      exitCode: 0
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCXXCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting CXX compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xrg4bg"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xrg4bg"
    cmakeVariables:
      CMAKE_CXX_FLAGS: "/DWIN32 /D_WINDOWS /EHsc"
      CMAKE_CXX_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_CXX_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xrg4bg'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_07715.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/5 21:21:09銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xrg4bg\\cmTC_07715.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_07715.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xrg4bg\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_07715.dir\\Debug\\cmTC_07715.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_07715.dir\\Debug\\cmTC_07715.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_07715.dir\\Debug\\cmTC_07715.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_07715.dir\\Debug\\\\" /Fd"cmTC_07715.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_07715.dir\\Debug\\\\" /Fd"cmTC_07715.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          CMakeCXXCompilerABI.cpp
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xrg4bg\\Debug\\cmTC_07715.exe" /INCREMENTAL /ILK:"cmTC_07715.dir\\Debug\\cmTC_07715.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xrg4bg/Debug/cmTC_07715.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xrg4bg/Debug/cmTC_07715.lib" /MACHINE:X64  /machine:x64 cmTC_07715.dir\\Debug\\CMakeCXXCompilerABI.obj
          cmTC_07715.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xrg4bg\\Debug\\cmTC_07715.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_07715.dir\\Debug\\cmTC_07715.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_07715.dir\\Debug\\cmTC_07715.tlog\\cmTC_07715.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xrg4bg\\cmTC_07715.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.39
        
      exitCode: 0
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple (clang|LLVM) version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is OrangeC using "--version" did not match "occ \\(OrangeC\\) Version":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is HP using "-V" did not match "HP C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is IntelLLVM using "--version" did not match "(Intel[^
      ]+oneAPI)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“-qversion”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1131 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is MSVC using "-?" matched "Microsoft":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
                   C/C++ 编译器选项
      
      
                     -优化-
      
      /O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
      /Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
      /Og 启用全局优化                        /Oi[-] 启用内部函数
      /Os 优选代码空间                        /Ot 优选代码速度
      /Ox 优化(优选速度)                      
      /favor:<blend|AMD64|INTEL64|ATOM> 选择优化所针对的处理器，为以下值之一:
         blend - 针对几种不同 x64 处理器的优化组合
         AMD64 - 64 位 AMD 处理器
         INTEL64 - Intel(R)64 架构处理器
         ATOM - Intel(R) Atom(TM) 处理器
      
                     -代码生成-
      
      /Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
      /GF 启用只读字符串池                    /Gy[-] 分隔链接器函数
      /GS[-] 启用安全检查                     /GR[-] 启用 C++ RTTI
      /guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
      /EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
      /EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
      /fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
         协定 - 生成代码时考虑浮点收缩
         except[-] - 在生成代码时考虑浮点异常
         fast - "fast" 浮点模型；结果可预测性比较低
         precise - "precise" 浮点模型；结果可预测
         strict - "strict" 浮点模型(意味着 /fp:except)
      即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
      /Qspectre[-] 对 CVE 2017-5753 启用缓解措施
      /Qpar[-] 启用并行代码生成               
      /Qpar-report:1 自动并行化诊断；指示已并行化循环
      /Qpar-report:2 自动并行化诊断；指示未并行化循环
      /Qvec-report:1 自动向量化诊断；指示已向量化循环
      /Qvec-report:2 自动向量化诊断；指示未向量化循环
      /GL[-] 启用链接时代码生成               
      /volatile:<iso|ms> 选择可变模型:
         iso - Acquire/release 语义对可变访问不一定有效
         ms - Acquire/release 语义对可变访问一定有效
      /GA 为 Windows 应用程序进行优化         /Ge 对所有函数强制堆栈检查
      /Gs[num] 控制堆栈检查调用               /Gh 启用 _penter 函数调用
      /GH 启用 _pexit 函数调用                /GT 生成纤程安全 TLS 访问
      /RTC1 启用快速检查(/RTCsu)              /RTCc 转换为较小的类型检查
      /RTCs 堆栈帧运行时检查                  /RTCu 未初始化的局部用法检查
      /clr[：option] 编译公共语言运行时，其中选项为：
          pure ： 生成仅 IL 的输出文件 (没有本机可执行代码)
          安全 ： 生成仅 IL 可验证的输出文件
          netcore ： 生成面向 .NET Core 运行时的程序集
          noAssembly ： 不生成程序集
          nostdlib ： 搜索程序集时忽略系统 .NET Framework 目录
          nostdimport ： 不隐式导入任何必需的程序集
          initialAppDomain ： 启用 Visual C++ 2002 的初始 AppDomain 行为
          implicitKeepAlive- ： 关闭 System：：GC：：KeepAlive 的隐式发出(此)
          char_t- ： 关闭对char8_t、char16_t和char32_t的元数据支持
          ECMAParamArray ： 对参数数组的重载使用 ECMA-372/372/14.6 中指定的规则 (/clr)
          ECMAParamArray- 使用带有参数数组的新规则，(/clr：netcore)
      /fsanitize=解决启用地址消毒代码生成     
      /homeparams 强制将传入寄存器的参数写入到堆栈中
      /GZ 启用堆栈检查(/RTCs)                 /Gv __vectorcall 调用约定
      (预览版)/dynamicdeopt 启用动态调试；放置取消优化的断点，并通过按需函数取消优化随时随地单步执行
      (预览) /dynamicdeopt:suffix <suffix> 用于去优化输出的文件扩展名后缀(默认值: .alt)
      (预览) /dynamicdeopt:sync 在生成优化输出后生成去优化输出，而不是并行生成
      /arch:<SSE2|SSE4.2|AVX|AVX2|AVX512|AVX10.x> 最低 CPU 体系结构要求，以下之一:
         SSE2 - (默认)允许使用通过支持 SSE2 的 CPU 提供的指令
         SSE4.2 - 允许使用通过支持 SSE4.2 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX 的 CPU 提供的指令
         AVX2 - 允许使用通过支持 AVX2 的 CPU 提供的指令
         AVX512 - 允许使用通过支持 AVX-512 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX10.x 的 CPU 提供的指令。x 的有效值为 1
      /QIntel-jcc-erratum 为 Intel JCC Erratum 启用缓解措施
      /Qspectre-load 对加载内存的所有指令启用 spectre 缓解措施
      /Qspectre-load-cf 对加载内存的所有控制流指令启用 spectre 缓解措施
      /Qspectre-jmp[-] 为无条件跳转指令启用 Spectre 缓解
      /fpcvt:<IA|BC> 无符号整数转换兼容性为 FP
        IA - 与 VCVTTSD2USI 指令兼容的结果
        BC - 与 VS2017 及更低版本的编译器兼容的结果
      /jumptablerdata 在 .rdata 部分中放置 switch case 语句的跳转表
      /vlen=<256|512> 为自动代码生成选择 256 或 512 的矢量长度
      /vlen 根据 /arch 设置选择默认矢量长度   
      
                     -输出文件-
      
      /Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
      /Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
      /Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
      /Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
      /FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
      /Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
      /Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
      /Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
      /Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址
      /doc[file] 处理 XML 文档注释，并可选择命名 .xdc 文件
      
                     -预处理器-
      
      /AI<dir> 添加到程序集搜索路径           /FU<file> 导入 .NET 程序集/模块
      /FU:asFriend<file> 将 .NET 程序集/模块导入为友元
      /C 不抽出注释                           /D<name>{=|#}<text> 定义宏
      /E 预处理到 stdout                      /EP 预处理到 stdout，无行号
      /P 预处理到文件                         /Fx 将插入的代码合并到文件中
      /FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
      /u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
      /X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
      /PD 打印所有宏定义                      
      
                      -语言-
      
      /std:<c++14|c++17|c++20|c++latest> C++ 标准版
          c++14 - ISO/IEC 14882:2014 (默认值)
          c++17 - ISO/IEC 14882:2017
          c++20 - ISO/IEC 14882:2020
          c++latest - 最新草案标准(功能集可能更改)
      /std:<c11|c17|clatest> C 标准版本
         c11 - ISO/IEC 9899:2011
         c17 - ISO/IEC 9899:2018
         clatest - 最新草稿标准(功能集可能会更改)
      /permissive[-] 启用一些不符合格式的代码进行编译
                    (功能集可能会更改)(在 C++20 及更高版本中默认关闭)
      /Za 禁用扩展(不建议用于 C++)            /ZW 启用 WinRT 语言扩展
      /Zs 只进行语法检查                      
      /await 启用可恢复函数扩展
      /await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
      /constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
      /constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
      /constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 1048576)
      /Zi 启用调试信息                        /Z7 启用旧式调试信息
      /Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
      /ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
      /Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
      /vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
      /Zc:arg1[,arg2] 语言一致性，这里的参数可以是:
       forScope[-]      对范围规则强制使用标准 C++
       wchar_t[-]      wchar_t 是本机类型，不是 typedef
       auto[-]               对 auto 强制使用新的标准 C++ 含义
       trigraphs[-]          启用三元祖(默认关闭)
       rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       strictStrings[-]      禁用字符串文本到 [char|wchar_t]*
                             转换(在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
       threadSafeInit[-]   启用线程安全的本地静态初始化
       inline[-]             删除未引用的函数或数据，如果其为
                             COMDAT 或仅具有内部链接(默认情况下关闭)
       sizedDealloc[-]       启用 C++14 全局大小的解除分配
                             函数(默认启用)
       throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
       referenceBinding[-]   临时，不会绑定到非常量
                             值引用(默认情况下为 C++20 或更高版本，由 /permissive-隐含)
       twoPhase-             禁用两阶段名称查找
       ternary[-]            对条件运算符强制执行 C++11 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
       alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
       hiddenFriend[-]       强制执行标准 C++ 隐藏友元规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       externC[-]            对 'extern "C"' 函数强制执行标准 C++ 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
       zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
       static_assert[-]      严格处理 "static_assert" (在 C++20 或更高版本中默认处于打开状态，
                             由 /permissive- 隐含)
       gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
       templateScope[-]      强制执行标准 C++ 模板参数阴影规则
       enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
       checkGwOdr[-]         强制实施标准 C++ 一个定义规则违反
                             启用 /Gw 时(默认关闭)
       nrvo[-]               启用可选复制和移动消除(在 C++20 或更高版本中默认开启，
                             由 /permissive 或 /O2 隐含)
       __STDC__在 C 中将 __STDC__ 定义为 1
       __cplusplus[-]        __cplusplus 宏报告支持的 C++ 标准(默认关闭)
       char8_t[-]            将 C++20 本机`u8`文本支持启用为`const char8_t`
                             (默认情况下为 C++20 或更高版本)
       externConstexpr[-]    为 C++ 中的 constexpr 变量启用外部链接
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       preprocessor[-]       在 C/C++ 中启用标准一致性预处理器
                             (默认情况下为 C11 或更高版本)
      /ZI 启用“编辑并继续”调试信息          /openmp 启用 OpenMP 2.0 语言扩展
      /openmp:experimental 会启用 OpenMP 2.0 语言扩展并选择 OpenMP 3.0+ 语言扩展
      使用 LLVM 运行时 /openmp:llvm OpenMP 语言扩展
      
                     - 杂项 -
      
      @<file> 选项响应文件                    /?, /help 打印此帮助消息
      /bigobj 生成扩展的对象格式              /c 只编译，不链接
      /FC 诊断中使用完整路径名                /H<num> 最大外部名称长度
      /J 默认 char 类型是 unsigned            /MP[n] 最多使用“n”个进程进行编译
      /nologo 取消显示版权信息                /showIncludes 显示包含文件名
      /Tc<source file> 将文件编译为 .c        /Tp<source file> 将文件编译为 .cpp
      /TC 将所有文件编译为 .c                 /TP 将所有文件编译为 .cpp
      /V<string> 设置版本字符串               /Yc[file] 创建 .PCH 文件
      /Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
      /Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
      /Zm<n> 最大内存分配(默认值的百分比)     /FS 强制使用 MSPDBSRV.EXE
      /source-charset:<iana-name>|.nnnn 集源字符集
      /execution-charset:<iana-name>|.nnnn 集执行字符集
      /utf-8 集源和到 UTF-8 的执行字符集      
      /validate-charset[-] 验证 UTF-8 文件是否只有合法字符
      /fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
      /presetPadding[-] 将基于堆栈的类类型的填充初始化为零
      /volatileMetadata[-] 对易失存储器访问生成元数据
      /sourcelink [file] 包含源链接信息的文件 
      
                      -链接-
      
      /LD 创建 .DLL                           /LDd 创建 .DLL 调试库
      /LN 创建 .netmodule                     /F<num> 设置堆栈大小
      /link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
      /MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTD.LIB 调试库链接
      /MTd 与 LIBCMTD.LIB 调试库链接          
      
                     -代码分析-
      
      /analyze[-] 启用本机分析                /analyze:quiet[-] 没有对控制台的警告
      /analyze:log<name> 对文件的警告         /analyze:autolog Log to *.pftlog
      /analyze:autolog:ext<ext> Log to *.<ext>/analyze:autolog- 无日志文件
      /analyze:WX- 警告不严重                 /analyze:stacksize<num> 最大堆栈帧
      /analyze:max_paths<num> 最大路径        /analyze:only Analyze, no code gen
      
                                    -诊断-
      
      /diagnostics:<args,...> 控制诊断消息的格式:
                   传统型 - 保留之前的格式
                   列[-] - 打印列信息
                   脱字号[-] - 打印列和源的指示行
      /Wall 启用所有警告                      /w   禁用所有警告
      /W<n> 设置警告等级(默认 n=1)            
      /Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
      /WX 将警告视为错误                      /WL 启用单行诊断
      /wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
      /wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
      /external:I <path>      - 外部标头的位置
      /external:env:<var>    - 外部标头位置的环境变量
      /external:anglebrackets - 将所有通过 <> 包含的标头视为外部
      /external:W<n>          - 外部标头的警告等级
      /external:templates[-]  - 跨模板实例化链评估警告级别
      /sdl 支持其他安全功能和警告             
      /选项: 严格无法识别的编译器选项是一个错误
      
...

---
events:
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:233 (message)"
      - "CMakeLists.txt:3 (project)"
    message: |
      The system is: Windows - 10.0.26100 - AMD64
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/6 18:02:15銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdC.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TC /FC /errorReport:queue CMakeCCompilerId.c
        CMakeCCompilerId.c
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdC.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdC.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdC.lib" /MACHINE:X64 Debug\\CMakeCCompilerId.obj
        CompilerIdC.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_C_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.64
      
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.exe"
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.vcxproj"
      
      The C compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdC/CompilerIdC.exe
      
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCXXCompiler.cmake:126 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/6 18:02:16銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdCXX.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TP /FC /errorReport:queue CMakeCXXCompilerId.cpp
        CMakeCXXCompilerId.cpp
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdCXX.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdCXX.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdCXX.lib" /MACHINE:X64 Debug\\CMakeCXXCompilerId.obj
        CompilerIdCXX.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_CXX_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_CXX_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\CompilerIdCXX.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.45
      
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.exe"
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.vcxproj"
      
      The CXX compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdCXX/CompilerIdCXX.exe
      
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting C compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-ymkgf8"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-ymkgf8"
    cmakeVariables:
      CMAKE_C_FLAGS: "/DWIN32 /D_WINDOWS"
      CMAKE_C_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_C_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-ymkgf8'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_e0dec.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/6 18:02:17銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-ymkgf8\\cmTC_e0dec.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_e0dec.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-ymkgf8\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_e0dec.dir\\Debug\\cmTC_e0dec.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_e0dec.dir\\Debug\\cmTC_e0dec.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_e0dec.dir\\Debug\\cmTC_e0dec.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_e0dec.dir\\Debug\\\\" /Fd"cmTC_e0dec.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_e0dec.dir\\Debug\\\\" /Fd"cmTC_e0dec.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          CMakeCCompilerABI.c
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-ymkgf8\\Debug\\cmTC_e0dec.exe" /INCREMENTAL /ILK:"cmTC_e0dec.dir\\Debug\\cmTC_e0dec.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-ymkgf8/Debug/cmTC_e0dec.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-ymkgf8/Debug/cmTC_e0dec.lib" /MACHINE:X64  /machine:x64 cmTC_e0dec.dir\\Debug\\CMakeCCompilerABI.obj
          cmTC_e0dec.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-ymkgf8\\Debug\\cmTC_e0dec.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_e0dec.dir\\Debug\\cmTC_e0dec.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_e0dec.dir\\Debug\\cmTC_e0dec.tlog\\cmTC_e0dec.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-ymkgf8\\cmTC_e0dec.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.38
        
      exitCode: 0
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCXXCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting CXX compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xwr9b6"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xwr9b6"
    cmakeVariables:
      CMAKE_CXX_FLAGS: "/DWIN32 /D_WINDOWS /EHsc"
      CMAKE_CXX_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_CXX_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xwr9b6'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_46c66.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/6 18:02:18銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xwr9b6\\cmTC_46c66.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_46c66.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xwr9b6\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_46c66.dir\\Debug\\cmTC_46c66.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_46c66.dir\\Debug\\cmTC_46c66.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_46c66.dir\\Debug\\cmTC_46c66.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_46c66.dir\\Debug\\\\" /Fd"cmTC_46c66.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_46c66.dir\\Debug\\\\" /Fd"cmTC_46c66.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          CMakeCXXCompilerABI.cpp
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xwr9b6\\Debug\\cmTC_46c66.exe" /INCREMENTAL /ILK:"cmTC_46c66.dir\\Debug\\cmTC_46c66.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xwr9b6/Debug/cmTC_46c66.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-xwr9b6/Debug/cmTC_46c66.lib" /MACHINE:X64  /machine:x64 cmTC_46c66.dir\\Debug\\CMakeCXXCompilerABI.obj
          cmTC_46c66.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xwr9b6\\Debug\\cmTC_46c66.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_46c66.dir\\Debug\\cmTC_46c66.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_46c66.dir\\Debug\\cmTC_46c66.tlog\\cmTC_46c66.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-xwr9b6\\cmTC_46c66.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.41
        
      exitCode: 0
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple (clang|LLVM) version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is OrangeC using "--version" did not match "occ \\(OrangeC\\) Version":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is HP using "-V" did not match "HP C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is IntelLLVM using "--version" did not match "(Intel[^
      ]+oneAPI)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“-qversion”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1131 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is MSVC using "-?" matched "Microsoft":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
                   C/C++ 编译器选项
      
      
                     -优化-
      
      /O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
      /Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
      /Og 启用全局优化                        /Oi[-] 启用内部函数
      /Os 优选代码空间                        /Ot 优选代码速度
      /Ox 优化(优选速度)                      
      /favor:<blend|AMD64|INTEL64|ATOM> 选择优化所针对的处理器，为以下值之一:
         blend - 针对几种不同 x64 处理器的优化组合
         AMD64 - 64 位 AMD 处理器
         INTEL64 - Intel(R)64 架构处理器
         ATOM - Intel(R) Atom(TM) 处理器
      
                     -代码生成-
      
      /Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
      /GF 启用只读字符串池                    /Gy[-] 分隔链接器函数
      /GS[-] 启用安全检查                     /GR[-] 启用 C++ RTTI
      /guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
      /EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
      /EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
      /fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
         协定 - 生成代码时考虑浮点收缩
         except[-] - 在生成代码时考虑浮点异常
         fast - "fast" 浮点模型；结果可预测性比较低
         precise - "precise" 浮点模型；结果可预测
         strict - "strict" 浮点模型(意味着 /fp:except)
      即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
      /Qspectre[-] 对 CVE 2017-5753 启用缓解措施
      /Qpar[-] 启用并行代码生成               
      /Qpar-report:1 自动并行化诊断；指示已并行化循环
      /Qpar-report:2 自动并行化诊断；指示未并行化循环
      /Qvec-report:1 自动向量化诊断；指示已向量化循环
      /Qvec-report:2 自动向量化诊断；指示未向量化循环
      /GL[-] 启用链接时代码生成               
      /volatile:<iso|ms> 选择可变模型:
         iso - Acquire/release 语义对可变访问不一定有效
         ms - Acquire/release 语义对可变访问一定有效
      /GA 为 Windows 应用程序进行优化         /Ge 对所有函数强制堆栈检查
      /Gs[num] 控制堆栈检查调用               /Gh 启用 _penter 函数调用
      /GH 启用 _pexit 函数调用                /GT 生成纤程安全 TLS 访问
      /RTC1 启用快速检查(/RTCsu)              /RTCc 转换为较小的类型检查
      /RTCs 堆栈帧运行时检查                  /RTCu 未初始化的局部用法检查
      /clr[：option] 编译公共语言运行时，其中选项为：
          pure ： 生成仅 IL 的输出文件 (没有本机可执行代码)
          安全 ： 生成仅 IL 可验证的输出文件
          netcore ： 生成面向 .NET Core 运行时的程序集
          noAssembly ： 不生成程序集
          nostdlib ： 搜索程序集时忽略系统 .NET Framework 目录
          nostdimport ： 不隐式导入任何必需的程序集
          initialAppDomain ： 启用 Visual C++ 2002 的初始 AppDomain 行为
          implicitKeepAlive- ： 关闭 System：：GC：：KeepAlive 的隐式发出(此)
          char_t- ： 关闭对char8_t、char16_t和char32_t的元数据支持
          ECMAParamArray ： 对参数数组的重载使用 ECMA-372/372/14.6 中指定的规则 (/clr)
          ECMAParamArray- 使用带有参数数组的新规则，(/clr：netcore)
      /fsanitize=解决启用地址消毒代码生成     
      /homeparams 强制将传入寄存器的参数写入到堆栈中
      /GZ 启用堆栈检查(/RTCs)                 /Gv __vectorcall 调用约定
      (预览版)/dynamicdeopt 启用动态调试；放置取消优化的断点，并通过按需函数取消优化随时随地单步执行
      (预览) /dynamicdeopt:suffix <suffix> 用于去优化输出的文件扩展名后缀(默认值: .alt)
      (预览) /dynamicdeopt:sync 在生成优化输出后生成去优化输出，而不是并行生成
      /arch:<SSE2|SSE4.2|AVX|AVX2|AVX512|AVX10.x> 最低 CPU 体系结构要求，以下之一:
         SSE2 - (默认)允许使用通过支持 SSE2 的 CPU 提供的指令
         SSE4.2 - 允许使用通过支持 SSE4.2 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX 的 CPU 提供的指令
         AVX2 - 允许使用通过支持 AVX2 的 CPU 提供的指令
         AVX512 - 允许使用通过支持 AVX-512 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX10.x 的 CPU 提供的指令。x 的有效值为 1
      /QIntel-jcc-erratum 为 Intel JCC Erratum 启用缓解措施
      /Qspectre-load 对加载内存的所有指令启用 spectre 缓解措施
      /Qspectre-load-cf 对加载内存的所有控制流指令启用 spectre 缓解措施
      /Qspectre-jmp[-] 为无条件跳转指令启用 Spectre 缓解
      /fpcvt:<IA|BC> 无符号整数转换兼容性为 FP
        IA - 与 VCVTTSD2USI 指令兼容的结果
        BC - 与 VS2017 及更低版本的编译器兼容的结果
      /jumptablerdata 在 .rdata 部分中放置 switch case 语句的跳转表
      /vlen=<256|512> 为自动代码生成选择 256 或 512 的矢量长度
      /vlen 根据 /arch 设置选择默认矢量长度   
      
                     -输出文件-
      
      /Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
      /Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
      /Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
      /Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
      /FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
      /Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
      /Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
      /Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
      /Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址
      /doc[file] 处理 XML 文档注释，并可选择命名 .xdc 文件
      
                     -预处理器-
      
      /AI<dir> 添加到程序集搜索路径           /FU<file> 导入 .NET 程序集/模块
      /FU:asFriend<file> 将 .NET 程序集/模块导入为友元
      /C 不抽出注释                           /D<name>{=|#}<text> 定义宏
      /E 预处理到 stdout                      /EP 预处理到 stdout，无行号
      /P 预处理到文件                         /Fx 将插入的代码合并到文件中
      /FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
      /u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
      /X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
      /PD 打印所有宏定义                      
      
                      -语言-
      
      /std:<c++14|c++17|c++20|c++latest> C++ 标准版
          c++14 - ISO/IEC 14882:2014 (默认值)
          c++17 - ISO/IEC 14882:2017
          c++20 - ISO/IEC 14882:2020
          c++latest - 最新草案标准(功能集可能更改)
      /std:<c11|c17|clatest> C 标准版本
         c11 - ISO/IEC 9899:2011
         c17 - ISO/IEC 9899:2018
         clatest - 最新草稿标准(功能集可能会更改)
      /permissive[-] 启用一些不符合格式的代码进行编译
                    (功能集可能会更改)(在 C++20 及更高版本中默认关闭)
      /Za 禁用扩展(不建议用于 C++)            /ZW 启用 WinRT 语言扩展
      /Zs 只进行语法检查                      
      /await 启用可恢复函数扩展
      /await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
      /constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
      /constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
      /constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 1048576)
      /Zi 启用调试信息                        /Z7 启用旧式调试信息
      /Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
      /ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
      /Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
      /vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
      /Zc:arg1[,arg2] 语言一致性，这里的参数可以是:
       forScope[-]      对范围规则强制使用标准 C++
       wchar_t[-]      wchar_t 是本机类型，不是 typedef
       auto[-]               对 auto 强制使用新的标准 C++ 含义
       trigraphs[-]          启用三元祖(默认关闭)
       rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       strictStrings[-]      禁用字符串文本到 [char|wchar_t]*
                             转换(在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
       threadSafeInit[-]   启用线程安全的本地静态初始化
       inline[-]             删除未引用的函数或数据，如果其为
                             COMDAT 或仅具有内部链接(默认情况下关闭)
       sizedDealloc[-]       启用 C++14 全局大小的解除分配
                             函数(默认启用)
       throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
       referenceBinding[-]   临时，不会绑定到非常量
                             值引用(默认情况下为 C++20 或更高版本，由 /permissive-隐含)
       twoPhase-             禁用两阶段名称查找
       ternary[-]            对条件运算符强制执行 C++11 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
       alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
       hiddenFriend[-]       强制执行标准 C++ 隐藏友元规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       externC[-]            对 'extern "C"' 函数强制执行标准 C++ 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
       zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
       static_assert[-]      严格处理 "static_assert" (在 C++20 或更高版本中默认处于打开状态，
                             由 /permissive- 隐含)
       gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
       templateScope[-]      强制执行标准 C++ 模板参数阴影规则
       enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
       checkGwOdr[-]         强制实施标准 C++ 一个定义规则违反
                             启用 /Gw 时(默认关闭)
       nrvo[-]               启用可选复制和移动消除(在 C++20 或更高版本中默认开启，
                             由 /permissive 或 /O2 隐含)
       __STDC__在 C 中将 __STDC__ 定义为 1
       __cplusplus[-]        __cplusplus 宏报告支持的 C++ 标准(默认关闭)
       char8_t[-]            将 C++20 本机`u8`文本支持启用为`const char8_t`
                             (默认情况下为 C++20 或更高版本)
       externConstexpr[-]    为 C++ 中的 constexpr 变量启用外部链接
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       preprocessor[-]       在 C/C++ 中启用标准一致性预处理器
                             (默认情况下为 C11 或更高版本)
      /ZI 启用“编辑并继续”调试信息          /openmp 启用 OpenMP 2.0 语言扩展
      /openmp:experimental 会启用 OpenMP 2.0 语言扩展并选择 OpenMP 3.0+ 语言扩展
      使用 LLVM 运行时 /openmp:llvm OpenMP 语言扩展
      
                     - 杂项 -
      
      @<file> 选项响应文件                    /?, /help 打印此帮助消息
      /bigobj 生成扩展的对象格式              /c 只编译，不链接
      /FC 诊断中使用完整路径名                /H<num> 最大外部名称长度
      /J 默认 char 类型是 unsigned            /MP[n] 最多使用“n”个进程进行编译
      /nologo 取消显示版权信息                /showIncludes 显示包含文件名
      /Tc<source file> 将文件编译为 .c        /Tp<source file> 将文件编译为 .cpp
      /TC 将所有文件编译为 .c                 /TP 将所有文件编译为 .cpp
      /V<string> 设置版本字符串               /Yc[file] 创建 .PCH 文件
      /Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
      /Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
      /Zm<n> 最大内存分配(默认值的百分比)     /FS 强制使用 MSPDBSRV.EXE
      /source-charset:<iana-name>|.nnnn 集源字符集
      /execution-charset:<iana-name>|.nnnn 集执行字符集
      /utf-8 集源和到 UTF-8 的执行字符集      
      /validate-charset[-] 验证 UTF-8 文件是否只有合法字符
      /fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
      /presetPadding[-] 将基于堆栈的类类型的填充初始化为零
      /volatileMetadata[-] 对易失存储器访问生成元数据
      /sourcelink [file] 包含源链接信息的文件 
      
                      -链接-
      
      /LD 创建 .DLL                           /LDd 创建 .DLL 调试库
      /LN 创建 .netmodule                     /F<num> 设置堆栈大小
      /link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
      /MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTD.LIB 调试库链接
      /MTd 与 LIBCMTD.LIB 调试库链接          
      
                     -代码分析-
      
      /analyze[-] 启用本机分析                /analyze:quiet[-] 没有对控制台的警告
      /analyze:log<name> 对文件的警告         /analyze:autolog Log to *.pftlog
      /analyze:autolog:ext<ext> Log to *.<ext>/analyze:autolog- 无日志文件
      /analyze:WX- 警告不严重                 /analyze:stacksize<num> 最大堆栈帧
      /analyze:max_paths<num> 最大路径        /analyze:only Analyze, no code gen
      
                                    -诊断-
      
      /diagnostics:<args,...> 控制诊断消息的格式:
                   传统型 - 保留之前的格式
                   列[-] - 打印列信息
                   脱字号[-] - 打印列和源的指示行
      /Wall 启用所有警告                      /w   禁用所有警告
      /W<n> 设置警告等级(默认 n=1)            
      /Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
      /WX 将警告视为错误                      /WL 启用单行诊断
      /wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
      /wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
      /external:I <path>      - 外部标头的位置
      /external:env:<var>    - 外部标头位置的环境变量
      /external:anglebrackets - 将所有通过 <> 包含的标头视为外部
      /external:W<n>          - 外部标头的警告等级
      /external:templates[-]  - 跨模板实例化链评估警告级别
      /sdl 支持其他安全功能和警告             
      /选项: 严格无法识别的编译器选项是一个错误
      
...

---
events:
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:233 (message)"
      - "CMakeLists.txt:3 (project)"
    message: |
      The system is: Windows - 10.0.26100 - AMD64
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCCompiler.cmake:123 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/6 19:31:21銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdC.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TC /FC /errorReport:queue CMakeCCompilerId.c
        CMakeCCompilerId.c
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdC.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdC.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdC.lib" /MACHINE:X64 Debug\\CMakeCCompilerId.obj
        CompilerIdC.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_C_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdC.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdC\\CompilerIdC.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.61
      
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.exe"
      
      Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CompilerIdC.vcxproj"
      
      The C compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdC/CompilerIdC.exe
      
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:17 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:64 (__determine_compiler_id_test)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCXXCompiler.cmake:126 (CMAKE_DETERMINE_COMPILER_ID)"
      - "CMakeLists.txt:3 (project)"
    message: |
      Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
      Compiler:  
      Build flags: 
      Id flags:  
      
      The output was:
      0
      閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
      鐢熸垚鍚姩鏃堕棿涓?2025/10/6 19:31:22銆?
      
      鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)銆?
      PrepareForBuild:
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\鈥濄€?
        宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
        姝ｅ湪鍒涘缓鐩綍鈥淒ebug\\CompilerIdCXX.tlog\\鈥濄€?
      InitializeBuildStatus:
        姝ｅ湪鍒涘缓鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
      ClCompile:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\\\" /Fd"Debug\\vc143.pdb" /external:W0 /Gd /TP /FC /errorReport:queue CMakeCXXCompilerId.cpp
        CMakeCXXCompilerId.cpp
      Link:
        C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:".\\CompilerIdCXX.exe" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:".\\CompilerIdCXX.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:".\\CompilerIdCXX.lib" /MACHINE:X64 Debug\\CMakeCXXCompilerId.obj
        CompilerIdCXX.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.exe
      PostBuildEvent:
        for %%i in (cl.exe) do @echo CMAKE_CXX_COMPILER=%%~$PATH:i
        :VCEnd
        CMAKE_CXX_COMPILER=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\Hostx64\\x64\\cl.exe
      FinalizeBuildStatus:
        姝ｅ湪鍒犻櫎鏂囦欢鈥淒ebug\\CompilerIdCXX.tlog\\unsuccessfulbuild鈥濄€?
        姝ｅ湪瀵光€淒ebug\\CompilerIdCXX.tlog\\CompilerIdCXX.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
      宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\3.28.1\\CompilerIdCXX\\CompilerIdCXX.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
      
      宸叉垚鍔熺敓鎴愩€?
          0 涓鍛?
          0 涓敊璇?
      
      宸茬敤鏃堕棿 00:00:00.54
      
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.exe"
      
      Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CompilerIdCXX.vcxproj"
      
      The CXX compiler identification is MSVC, found in:
        C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/3.28.1/CompilerIdCXX/CompilerIdCXX.exe
      
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting C compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vhfjmf"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vhfjmf"
    cmakeVariables:
      CMAKE_C_FLAGS: "/DWIN32 /D_WINDOWS"
      CMAKE_C_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_C_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vhfjmf'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_be429.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/6 19:31:23銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vhfjmf\\cmTC_be429.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_be429.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vhfjmf\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_be429.dir\\Debug\\cmTC_be429.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_be429.dir\\Debug\\cmTC_be429.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_be429.dir\\Debug\\cmTC_be429.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_be429.dir\\Debug\\\\" /Fd"cmTC_be429.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_be429.dir\\Debug\\\\" /Fd"cmTC_be429.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TC /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCCompilerABI.c"
          CMakeCCompilerABI.c
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vhfjmf\\Debug\\cmTC_be429.exe" /INCREMENTAL /ILK:"cmTC_be429.dir\\Debug\\cmTC_be429.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vhfjmf/Debug/cmTC_be429.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-vhfjmf/Debug/cmTC_be429.lib" /MACHINE:X64  /machine:x64 cmTC_be429.dir\\Debug\\CMakeCCompilerABI.obj
          cmTC_be429.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vhfjmf\\Debug\\cmTC_be429.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_be429.dir\\Debug\\cmTC_be429.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_be429.dir\\Debug\\cmTC_be429.tlog\\cmTC_be429.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-vhfjmf\\cmTC_be429.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.49
        
      exitCode: 0
  -
    kind: "try_compile-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerABI.cmake:57 (try_compile)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeTestCXXCompiler.cmake:26 (CMAKE_DETERMINE_COMPILER_ABI)"
      - "CMakeLists.txt:3 (project)"
    checks:
      - "Detecting CXX compiler ABI info"
    directories:
      source: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-17w8ix"
      binary: "C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-17w8ix"
    cmakeVariables:
      CMAKE_CXX_FLAGS: "/DWIN32 /D_WINDOWS /EHsc"
      CMAKE_CXX_FLAGS_DEBUG: "/Zi /Ob0 /Od /RTC1"
      CMAKE_EXE_LINKER_FLAGS: "/machine:x64"
    buildResult:
      variable: "CMAKE_CXX_ABI_COMPILED"
      cached: true
      stdout: |
        Change Dir: 'C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-17w8ix'
        
        Run Build Command(s): "C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/Bin/amd64/MSBuild.exe" cmTC_04c5f.vcxproj /p:Configuration=Debug /p:Platform=x64 /p:VisualStudioVersion=17.0 /v:n
        閫傜敤浜?.NET Framework MSBuild 鐗堟湰 17.14.19+164abd434
        鐢熸垚鍚姩鏃堕棿涓?2025/10/6 19:31:24銆?
        
        鑺傜偣 1 涓婄殑椤圭洰鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-17w8ix\\cmTC_04c5f.vcxproj鈥?榛樿鐩爣)銆?
        PrepareForBuild:
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_04c5f.dir\\Debug\\鈥濄€?
          宸插惎鐢ㄧ粨鏋勫寲杈撳嚭銆傜紪璇戝櫒璇婃柇鐨勬牸寮忚缃皢鍙嶆槧閿欒灞傛缁撴瀯銆傛湁鍏宠缁嗕俊鎭紝璇峰弬闃?https://aka.ms/cpp/structured-output銆?
          姝ｅ湪鍒涘缓鐩綍鈥淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-17w8ix\\Debug\\鈥濄€?
          姝ｅ湪鍒涘缓鐩綍鈥渃mTC_04c5f.dir\\Debug\\cmTC_04c5f.tlog\\鈥濄€?
        InitializeBuildStatus:
          姝ｅ湪鍒涘缓鈥渃mTC_04c5f.dir\\Debug\\cmTC_04c5f.tlog\\unsuccessfulbuild鈥濓紝鍥犱负宸叉寚瀹氣€淎lwaysCreate鈥濄€?
          姝ｅ湪瀵光€渃mTC_04c5f.dir\\Debug\\cmTC_04c5f.tlog\\unsuccessfulbuild鈥濇墽琛?Touch 浠诲姟銆?
        ClCompile:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\CL.exe /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_04c5f.dir\\Debug\\\\" /Fd"cmTC_04c5f.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          鐢ㄤ簬 x64 鐨?Microsoft (R) C/C++ 浼樺寲缂栬瘧鍣?19.44.35215 鐗?
          鐗堟潈鎵€鏈?C) Microsoft Corporation銆備繚鐣欐墍鏈夋潈鍒┿€?
          cl /c /Zi /W1 /WX- /diagnostics:column /Od /Ob0 /D _MBCS /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\\"Debug\\"" /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"cmTC_04c5f.dir\\Debug\\\\" /Fd"cmTC_04c5f.dir\\Debug\\vc143.pdb" /external:W1 /Gd /TP /errorReport:queue "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\share\\cmake-3.28\\Modules\\CMakeCXXCompilerABI.cpp"
          CMakeCXXCompilerABI.cpp
        Link:
          C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:"C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-17w8ix\\Debug\\cmTC_04c5f.exe" /INCREMENTAL /ILK:"cmTC_04c5f.dir\\Debug\\cmTC_04c5f.ilk" /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-17w8ix/Debug/cmTC_04c5f.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/27810/Desktop/sixth_class/build/CMakeFiles/CMakeScratch/TryCompile-17w8ix/Debug/cmTC_04c5f.lib" /MACHINE:X64  /machine:x64 cmTC_04c5f.dir\\Debug\\CMakeCXXCompilerABI.obj
          cmTC_04c5f.vcxproj -> C:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-17w8ix\\Debug\\cmTC_04c5f.exe
        FinalizeBuildStatus:
          姝ｅ湪鍒犻櫎鏂囦欢鈥渃mTC_04c5f.dir\\Debug\\cmTC_04c5f.tlog\\unsuccessfulbuild鈥濄€?
          姝ｅ湪瀵光€渃mTC_04c5f.dir\\Debug\\cmTC_04c5f.tlog\\cmTC_04c5f.lastbuildstate鈥濇墽琛?Touch 浠诲姟銆?
        宸插畬鎴愮敓鎴愰」鐩€淐:\\Users\\27810\\Desktop\\sixth_class\\build\\CMakeFiles\\CMakeScratch\\TryCompile-17w8ix\\cmTC_04c5f.vcxproj鈥?榛樿鐩爣)鐨勬搷浣溿€?
        
        宸叉垚鍔熺敓鎴愩€?
            0 涓鍛?
            0 涓敊璇?
        
        宸茬敤鏃堕棿 00:00:00.43
        
      exitCode: 0
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple (clang|LLVM) version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is OrangeC using "--version" did not match "occ \\(OrangeC\\) Version":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is HP using "-V" did not match "HP C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is IntelLLVM using "--version" did not match "(Intel[^
      ]+oneAPI)":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“--version”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 error D8004 :“/V”需要参数
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1144 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
      cl: 命令行 warning D9002 :忽略未知选项“-qversion”
      cl: 命令行 error D8003 :缺少源文件名
  -
    kind: "message-v1"
    backtrace:
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineCompilerId.cmake:1131 (message)"
      - "C:/ST/STM32CubeCLT_1.18.0/CMake/share/cmake-3.28/Modules/CMakeDetermineASMCompiler.cmake:131 (CMAKE_DETERMINE_COMPILER_ID_VENDOR)"
      - "CMakeLists.txt:7 (enable_language)"
    message: |
      Checking whether the ASM compiler is MSVC using "-?" matched "Microsoft":
      用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.44.35215 版
      版权所有(C) Microsoft Corporation。保留所有权利。
      
                   C/C++ 编译器选项
      
      
                     -优化-
      
      /O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
      /Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
      /Og 启用全局优化                        /Oi[-] 启用内部函数
      /Os 优选代码空间                        /Ot 优选代码速度
      /Ox 优化(优选速度)                      
      /favor:<blend|AMD64|INTEL64|ATOM> 选择优化所针对的处理器，为以下值之一:
         blend - 针对几种不同 x64 处理器的优化组合
         AMD64 - 64 位 AMD 处理器
         INTEL64 - Intel(R)64 架构处理器
         ATOM - Intel(R) Atom(TM) 处理器
      
                     -代码生成-
      
      /Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
      /GF 启用只读字符串池                    /Gy[-] 分隔链接器函数
      /GS[-] 启用安全检查                     /GR[-] 启用 C++ RTTI
      /guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
      /EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
      /EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
      /fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
         协定 - 生成代码时考虑浮点收缩
         except[-] - 在生成代码时考虑浮点异常
         fast - "fast" 浮点模型；结果可预测性比较低
         precise - "precise" 浮点模型；结果可预测
         strict - "strict" 浮点模型(意味着 /fp:except)
      即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
      /Qspectre[-] 对 CVE 2017-5753 启用缓解措施
      /Qpar[-] 启用并行代码生成               
      /Qpar-report:1 自动并行化诊断；指示已并行化循环
      /Qpar-report:2 自动并行化诊断；指示未并行化循环
      /Qvec-report:1 自动向量化诊断；指示已向量化循环
      /Qvec-report:2 自动向量化诊断；指示未向量化循环
      /GL[-] 启用链接时代码生成               
      /volatile:<iso|ms> 选择可变模型:
         iso - Acquire/release 语义对可变访问不一定有效
         ms - Acquire/release 语义对可变访问一定有效
      /GA 为 Windows 应用程序进行优化         /Ge 对所有函数强制堆栈检查
      /Gs[num] 控制堆栈检查调用               /Gh 启用 _penter 函数调用
      /GH 启用 _pexit 函数调用                /GT 生成纤程安全 TLS 访问
      /RTC1 启用快速检查(/RTCsu)              /RTCc 转换为较小的类型检查
      /RTCs 堆栈帧运行时检查                  /RTCu 未初始化的局部用法检查
      /clr[：option] 编译公共语言运行时，其中选项为：
          pure ： 生成仅 IL 的输出文件 (没有本机可执行代码)
          安全 ： 生成仅 IL 可验证的输出文件
          netcore ： 生成面向 .NET Core 运行时的程序集
          noAssembly ： 不生成程序集
          nostdlib ： 搜索程序集时忽略系统 .NET Framework 目录
          nostdimport ： 不隐式导入任何必需的程序集
          initialAppDomain ： 启用 Visual C++ 2002 的初始 AppDomain 行为
          implicitKeepAlive- ： 关闭 System：：GC：：KeepAlive 的隐式发出(此)
          char_t- ： 关闭对char8_t、char16_t和char32_t的元数据支持
          ECMAParamArray ： 对参数数组的重载使用 ECMA-372/372/14.6 中指定的规则 (/clr)
          ECMAParamArray- 使用带有参数数组的新规则，(/clr：netcore)
      /fsanitize=解决启用地址消毒代码生成     
      /homeparams 强制将传入寄存器的参数写入到堆栈中
      /GZ 启用堆栈检查(/RTCs)                 /Gv __vectorcall 调用约定
      (预览版)/dynamicdeopt 启用动态调试；放置取消优化的断点，并通过按需函数取消优化随时随地单步执行
      (预览) /dynamicdeopt:suffix <suffix> 用于去优化输出的文件扩展名后缀(默认值: .alt)
      (预览) /dynamicdeopt:sync 在生成优化输出后生成去优化输出，而不是并行生成
      /arch:<SSE2|SSE4.2|AVX|AVX2|AVX512|AVX10.x> 最低 CPU 体系结构要求，以下之一:
         SSE2 - (默认)允许使用通过支持 SSE2 的 CPU 提供的指令
         SSE4.2 - 允许使用通过支持 SSE4.2 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX 的 CPU 提供的指令
         AVX2 - 允许使用通过支持 AVX2 的 CPU 提供的指令
         AVX512 - 允许使用通过支持 AVX-512 的 CPU 提供的指令
         AVX - 允许使用通过支持 AVX10.x 的 CPU 提供的指令。x 的有效值为 1
      /QIntel-jcc-erratum 为 Intel JCC Erratum 启用缓解措施
      /Qspectre-load 对加载内存的所有指令启用 spectre 缓解措施
      /Qspectre-load-cf 对加载内存的所有控制流指令启用 spectre 缓解措施
      /Qspectre-jmp[-] 为无条件跳转指令启用 Spectre 缓解
      /fpcvt:<IA|BC> 无符号整数转换兼容性为 FP
        IA - 与 VCVTTSD2USI 指令兼容的结果
        BC - 与 VS2017 及更低版本的编译器兼容的结果
      /jumptablerdata 在 .rdata 部分中放置 switch case 语句的跳转表
      /vlen=<256|512> 为自动代码生成选择 256 或 512 的矢量长度
      /vlen 根据 /arch 设置选择默认矢量长度   
      
                     -输出文件-
      
      /Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
      /Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
      /Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
      /Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
      /FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
      /Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
      /Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
      /Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
      /Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址
      /doc[file] 处理 XML 文档注释，并可选择命名 .xdc 文件
      
                     -预处理器-
      
      /AI<dir> 添加到程序集搜索路径           /FU<file> 导入 .NET 程序集/模块
      /FU:asFriend<file> 将 .NET 程序集/模块导入为友元
      /C 不抽出注释                           /D<name>{=|#}<text> 定义宏
      /E 预处理到 stdout                      /EP 预处理到 stdout，无行号
      /P 预处理到文件                         /Fx 将插入的代码合并到文件中
      /FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
      /u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
      /X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
      /PD 打印所有宏定义                      
      
                      -语言-
      
      /std:<c++14|c++17|c++20|c++latest> C++ 标准版
          c++14 - ISO/IEC 14882:2014 (默认值)
          c++17 - ISO/IEC 14882:2017
          c++20 - ISO/IEC 14882:2020
          c++latest - 最新草案标准(功能集可能更改)
      /std:<c11|c17|clatest> C 标准版本
         c11 - ISO/IEC 9899:2011
         c17 - ISO/IEC 9899:2018
         clatest - 最新草稿标准(功能集可能会更改)
      /permissive[-] 启用一些不符合格式的代码进行编译
                    (功能集可能会更改)(在 C++20 及更高版本中默认关闭)
      /Za 禁用扩展(不建议用于 C++)            /ZW 启用 WinRT 语言扩展
      /Zs 只进行语法检查                      
      /await 启用可恢复函数扩展
      /await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
      /constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
      /constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
      /constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 1048576)
      /Zi 启用调试信息                        /Z7 启用旧式调试信息
      /Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
      /ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
      /Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
      /vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
      /Zc:arg1[,arg2] 语言一致性，这里的参数可以是:
       forScope[-]      对范围规则强制使用标准 C++
       wchar_t[-]      wchar_t 是本机类型，不是 typedef
       auto[-]               对 auto 强制使用新的标准 C++ 含义
       trigraphs[-]          启用三元祖(默认关闭)
       rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       strictStrings[-]      禁用字符串文本到 [char|wchar_t]*
                             转换(在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
       threadSafeInit[-]   启用线程安全的本地静态初始化
       inline[-]             删除未引用的函数或数据，如果其为
                             COMDAT 或仅具有内部链接(默认情况下关闭)
       sizedDealloc[-]       启用 C++14 全局大小的解除分配
                             函数(默认启用)
       throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
       referenceBinding[-]   临时，不会绑定到非常量
                             值引用(默认情况下为 C++20 或更高版本，由 /permissive-隐含)
       twoPhase-             禁用两阶段名称查找
       ternary[-]            对条件运算符强制执行 C++11 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
       alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
       hiddenFriend[-]       强制执行标准 C++ 隐藏友元规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       externC[-]            对 'extern "C"' 函数强制执行标准 C++ 规则
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
       zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
       static_assert[-]      严格处理 "static_assert" (在 C++20 或更高版本中默认处于打开状态，
                             由 /permissive- 隐含)
       gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
       templateScope[-]      强制执行标准 C++ 模板参数阴影规则
       enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
       checkGwOdr[-]         强制实施标准 C++ 一个定义规则违反
                             启用 /Gw 时(默认关闭)
       nrvo[-]               启用可选复制和移动消除(在 C++20 或更高版本中默认开启，
                             由 /permissive 或 /O2 隐含)
       __STDC__在 C 中将 __STDC__ 定义为 1
       __cplusplus[-]        __cplusplus 宏报告支持的 C++ 标准(默认关闭)
       char8_t[-]            将 C++20 本机`u8`文本支持启用为`const char8_t`
                             (默认情况下为 C++20 或更高版本)
       externConstexpr[-]    为 C++ 中的 constexpr 变量启用外部链接
                             (在 C++20 或更高版本中默认启用，由 /permissive-隐含)
       preprocessor[-]       在 C/C++ 中启用标准一致性预处理器
                             (默认情况下为 C11 或更高版本)
      /ZI 启用“编辑并继续”调试信息          /openmp 启用 OpenMP 2.0 语言扩展
      /openmp:experimental 会启用 OpenMP 2.0 语言扩展并选择 OpenMP 3.0+ 语言扩展
      使用 LLVM 运行时 /openmp:llvm OpenMP 语言扩展
      
                     - 杂项 -
      
      @<file> 选项响应文件                    /?, /help 打印此帮助消息
      /bigobj 生成扩展的对象格式              /c 只编译，不链接
      /FC 诊断中使用完整路径名                /H<num> 最大外部名称长度
      /J 默认 char 类型是 unsigned            /MP[n] 最多使用“n”个进程进行编译
      /nologo 取消显示版权信息                /showIncludes 显示包含文件名
      /Tc<source file> 将文件编译为 .c        /Tp<source file> 将文件编译为 .cpp
      /TC 将所有文件编译为 .c                 /TP 将所有文件编译为 .cpp
      /V<string> 设置版本字符串               /Yc[file] 创建 .PCH 文件
      /Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
      /Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
      /Zm<n> 最大内存分配(默认值的百分比)     /FS 强制使用 MSPDBSRV.EXE
      /source-charset:<iana-name>|.nnnn 集源字符集
      /execution-charset:<iana-name>|.nnnn 集执行字符集
      /utf-8 集源和到 UTF-8 的执行字符集      
      /validate-charset[-] 验证 UTF-8 文件是否只有合法字符
      /fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
      /presetPadding[-] 将基于堆栈的类类型的填充初始化为零
      /volatileMetadata[-] 对易失存储器访问生成元数据
      /sourcelink [file] 包含源链接信息的文件 
      
                      -链接-
      
      /LD 创建 .DLL                           /LDd 创建 .DLL 调试库
      /LN 创建 .netmodule                     /F<num> 设置堆栈大小
      /link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
      /MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTD.LIB 调试库链接
      /MTd 与 LIBCMTD.LIB 调试库链接          
      
                     -代码分析-
      
      /analyze[-] 启用本机分析                /analyze:quiet[-] 没有对控制台的警告
      /analyze:log<name> 对文件的警告         /analyze:autolog Log to *.pftlog
      /analyze:autolog:ext<ext> Log to *.<ext>/analyze:autolog- 无日志文件
      /analyze:WX- 警告不严重                 /analyze:stacksize<num> 最大堆栈帧
      /analyze:max_paths<num> 最大路径        /analyze:only Analyze, no code gen
      
                                    -诊断-
      
      /diagnostics:<args,...> 控制诊断消息的格式:
                   传统型 - 保留之前的格式
                   列[-] - 打印列信息
                   脱字号[-] - 打印列和源的指示行
      /Wall 启用所有警告                      /w   禁用所有警告
      /W<n> 设置警告等级(默认 n=1)            
      /Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
      /WX 将警告视为错误                      /WL 启用单行诊断
      /wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
      /wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
      /external:I <path>      - 外部标头的位置
      /external:env:<var>    - 外部标头位置的环境变量
      /external:anglebrackets - 将所有通过 <> 包含的标头视为外部
      /external:W<n>          - 外部标头的警告等级
      /external:templates[-]  - 跨模板实例化链评估警告级别
      /sdl 支持其他安全功能和警告             
      /选项: 严格无法识别的编译器选项是一个错误
      
...
